{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\src\\\\pages\\\\Sudoku\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\nimport { getSudoku } from './solver/sudoku'; // The Sudoku Board + Gameplay\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Game() {\n  _s();\n\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    initArray,\n    setInitArray,\n    cellSelected,\n    setCellSelected,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    setWon\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState(false);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false);\n  let [tempcell, setTempCell] = useState(-1);\n  let nullArray = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']; // New Game + Initialise Variables\n\n  function createNewGame(e) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  } // Let the User enter a board of their choosing (no initial blocks)\n\n\n  function user_input_board_mode() {\n    setInitArray(nullArray);\n    setSolvedArray(nullArray);\n    setGameArray(nullArray);\n  } // Solve their sudoku problem\n\n\n  function user_input_solve() {\n    let sudoku = getSudoku();\n    const num_rows = document.getElementsByClassName(\"sudoku_row\");\n    let sudoku_string = '';\n    let MIN_NUM = 17;\n    let counter = 0;\n\n    for (let i = 0; i < num_rows.length; i++) {\n      const col = num_rows[i].getElementsByTagName(\"td\");\n\n      for (let j = 0; j < col.length; j++) {\n        const num = col[j].innerText;\n\n        if (num === \"0\") {\n          sudoku_string += '.';\n        } else {\n          sudoku_string += num;\n          counter++;\n        }\n      }\n    }\n\n    if (counter < MIN_NUM) {\n      alert('Need at least 17 Entries!');\n    } else {\n      setGameArray(sudoku.solve(sudoku_string));\n    }\n  } // Boolean to check if user has completed the Game\n\n\n  function won_game(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n      if (cellIndex === index) {\n        return value === solvedArray[cellIndex];\n      } else {\n        return cell === solvedArray[cellIndex];\n      }\n    })) {\n      return true;\n    }\n\n    return false;\n  } // Assign the cell (index) a value\n\n\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (won_game(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  } // User sets the cell value with cell_value function\n\n\n  function user_cell_value(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n    } else {\n      cell_value(index, value);\n    }\n  } // ======================================================================\n  // ======================== RIGHT SIDE FUNCTIONS ========================\n  // ======================================================================\n  // Clicking the Cell\n\n\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      user_cell_value(indexOfArray, numberSelected);\n    }\n\n    setCellSelected(indexOfArray);\n    window.addEventListener('onkeypress', abc);\n  }\n\n  function abc(e) {\n    console.log(e.key);\n  }\n\n  function user_type_number(event, index) {\n    const value = event.key;\n    console.log(cellSelected);\n    console.log('jello');\n\n    if (is_valid_input_number(event.key) && cellSelected !== -1) {\n      user_cell_value(index, value);\n    }\n  } // Change difficulty makes a new game with varying num tiles (less tiles = harder)\n\n\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  } // Selected number is the one the cell will change to\n\n\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      user_cell_value(cellSelected, number);\n    }\n  } // Goes back 1 move (using history)\n\n\n  function undo_move() {\n    if (history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined) setGameArray(arr);\n    }\n  } // Clear cell: only a typed in cell can be erased\n\n\n  function clear_cell() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  } // Hint: the selected cell will just fill the cell to be the correct number\n\n\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  } // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n\n\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  } // Fast mode: click on tile will change it to be last selected number\n\n\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  } // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // New game starts\n\n\n  function start_new_game() {\n    createNewGame();\n    close_new_game_modal();\n  } // Won game opens a modal, clicking it will remove\n\n\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  } // Modal Pop Up for starting a new game\n\n\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  } // Complete Sudoku Board\n\n\n  function complete_board() {\n    let tempHistory = history.slice();\n    tempHistory.push(gameArray.slice());\n    setHistory(tempHistory);\n    setGameArray(solvedArray);\n  } // Change the mode between sudoku game and solver modes\n\n\n  function change_sudoku_mode() {\n    const mode = document.getElementById(\"sudoku_mode_options\").value;\n    console.log(mode);\n\n    if (mode === \"sudoku_solver_option\") {\n      start_new_game();\n      user_input_board_mode();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"none\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"block\";\n    } else {\n      start_new_game();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"block\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"none\";\n    }\n  }\n\n  function is_valid_input_number(key) {\n    if (key === '1' || key === '2' || key === '3' || key === '4' || key === '5' || key === '6' || key === '7' || key === '8' || key === '9' || key === '0') {\n      return true;\n    } else {\n      return false;\n    }\n  } // Start a New Game\n\n\n  useEffect(() => {\n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function (e) {\n      if (e.target !== document.getElementsByClassName('sudoku_game')[0] && !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      }\n    });\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"sudoku_mode_options\",\n      name: \"sudoku_mode_options\",\n      defaultValue: \"Sudoku Game\",\n      onChange: change_sudoku_mode,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"sudoku_game_option\",\n        children: \"Sudoku Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"sudoku_solver_option\",\n        children: \"Sudoku Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"container blur\" : \"container \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innercontainer center_div\",\n        children: [/*#__PURE__*/_jsxDEV(GameSection, {\n          onClick: indexOfArray => onClickCell(indexOfArray)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatusSection, {\n          onClickNumber: number => onClickNumber(number),\n          onChange: e => onChangeDifficulty(e),\n          undo_move: undo_move,\n          clear_cell: clear_cell,\n          cell_hint: cell_hint,\n          change_mistakes_mode: change_mistakes_mode,\n          change_fast_mode: change_fast_mode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"sudoku_game_op_btns\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new_game_btn\",\n        onClick: open_new_game_modal,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new_game_btn\",\n        onClick: complete_board,\n        children: \"Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"sudoku_solver_op_btns\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new_game_btn\",\n        onClick: user_input_board_mode,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new_game_btn\",\n        onClick: user_input_solve,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_game_modal\",\n      id: \"new_game_modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ngm_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nbm_text\",\n          children: \"Do you wish to start a new game?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: start_new_game,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: close_new_game_modal,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngm_close\",\n          onClick: close_new_game_modal,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"overlay o_block\" : \"overlay\",\n      onClick: onClickOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"gameover_text\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"You \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameover_col_1\",\n          children: \"Solved \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameover_col_2\",\n          children: \"IT! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"QkXq9c/FIo5Ncf4xpbMot57gPhM=\", false, function () {\n  return [useSudokuContext];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/Game.js"],"names":["React","useState","useEffect","moment","GameSection","StatusSection","getUniqueSudoku","useSudokuContext","getSudoku","Game","numberSelected","setNumberSelected","gameArray","setGameArray","initArray","setInitArray","cellSelected","setCellSelected","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","setWon","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","tempcell","setTempCell","nullArray","createNewGame","e","temporaryInitArray","temporarySolvedArray","user_input_board_mode","user_input_solve","sudoku","num_rows","document","getElementsByClassName","sudoku_string","MIN_NUM","counter","i","length","col","getElementsByTagName","j","num","innerText","alert","solve","won_game","index","value","every","cell","cellIndex","cell_value","tempArray","slice","tempHistory","push","user_cell_value","onClickCell","indexOfArray","window","addEventListener","abc","console","log","key","user_type_number","event","is_valid_input_number","onChangeDifficulty","target","onClickNumber","number","undo_move","hist","arr","pop","undefined","clear_cell","cell_hint","change_mistakes_mode","change_fast_mode","start_new_game","close_new_game_modal","onClickOverlay","getElementById","style","visibility","open_new_game_modal","complete_board","change_sudoku_mode","mode","display","className","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\n\nimport { getSudoku } from './solver/sudoku';\n\n// The Sudoku Board + Gameplay\nexport function Game (){\n  \n  let { numberSelected, setNumberSelected,\n        gameArray, setGameArray,\n        initArray, setInitArray,\n        cellSelected, setCellSelected,\n        difficulty, setDifficulty,\n        setTimeGameStarted,\n        fastMode, setFastMode,\n        setWon } = useSudokuContext();\n\n  let [ mistakesMode, setMistakesMode ] = useState(false);\n  let [ history, setHistory ] = useState([]);\n  let [ solvedArray, setSolvedArray ] = useState([]);\n  let [ overlay, setOverlay ] = useState(false);\n\n  let [tempcell, setTempCell] = useState(-1)\n\n  let nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n\n  // New Game + Initialise Variables\n  function createNewGame(e) {\n    let [ temporaryInitArray, temporarySolvedArray ] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  // Let the User enter a board of their choosing (no initial blocks)\n  function user_input_board_mode() {\n    setInitArray(nullArray);\n    setSolvedArray(nullArray);\n    setGameArray(nullArray);\n  }\n\n  // Solve their sudoku problem\n  function user_input_solve() {\n    let sudoku = getSudoku();\n    const num_rows = document.getElementsByClassName(\"sudoku_row\");\n    let sudoku_string = '';\n    let MIN_NUM = 17;\n    let counter = 0;\n    for (let i = 0; i < num_rows.length; i++) {\n      const col = num_rows[i].getElementsByTagName(\"td\");\n      for (let j = 0; j < col.length; j++) {\n        const num = col[j].innerText;\n        if (num === \"0\") {\n          sudoku_string += '.'\n        } else {\n          sudoku_string += num; \n          counter++;\n        }\n      }\n    }\n    if (counter < MIN_NUM) {\n      alert('Need at least 17 Entries!')\n    } else {\n      setGameArray(sudoku.solve(sudoku_string));\n    }\n    \n  }\n\n\n  // Boolean to check if user has completed the Game\n  function won_game(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n        if (cellIndex === index) {\n          return value === solvedArray[cellIndex];\n        } else {\n          return cell === solvedArray[cellIndex];\n        }\n      })) {\n      return true;\n    }\n    return false;\n  }\n\n  // Assign the cell (index) a value\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (won_game(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  // User sets the cell value with cell_value function\n  function user_cell_value(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n    } else {\n      cell_value(index, value);\n    }\n  }\n\n\n  // ======================================================================\n  // ======================== RIGHT SIDE FUNCTIONS ========================\n  // ======================================================================\n\n  // Clicking the Cell\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      user_cell_value(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n\n    window.addEventListener('onkeypress', abc)\n  }\n\n  function abc(e) {\n    console.log(e.key);\n  }\n\n  function user_type_number(event, index) {\n    const value = event.key;\n    console.log(cellSelected)\n    console.log('jello')\n    if (is_valid_input_number(event.key) && cellSelected !== -1) {\n      user_cell_value(index, value);\n    }\n  }\n\n  // Change difficulty makes a new game with varying num tiles (less tiles = harder)\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  }\n\n  // Selected number is the one the cell will change to\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number)\n    } \n    else if (cellSelected !== -1) {\n      user_cell_value(cellSelected,number);\n    }\n  }\n\n  // Goes back 1 move (using history)\n  function undo_move() {\n    if(history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined)\n        setGameArray(arr);\n    }\n  }\n\n  // Clear cell: only a typed in cell can be erased\n  function clear_cell() {\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  }\n\n  // Hint: the selected cell will just fill the cell to be the correct number\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  // Fast mode: click on tile will change it to be last selected number\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // New game starts\n  function start_new_game() {\n    createNewGame();\n    close_new_game_modal();\n  }\n  // Won game opens a modal, clicking it will remove\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  }\n  // Modal Pop Up for starting a new game\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  }\n  \n  // Complete Sudoku Board\n  function complete_board() {\n    let tempHistory = history.slice();\n    tempHistory.push(gameArray.slice());\n    setHistory(tempHistory);\n    setGameArray(solvedArray);\n  }\n  \n  // Change the mode between sudoku game and solver modes\n  function change_sudoku_mode() {\n    const mode = document.getElementById(\"sudoku_mode_options\").value;\n    console.log(mode);\n    if (mode === \"sudoku_solver_option\") {\n      start_new_game();\n      user_input_board_mode();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"none\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"block\";\n    } else {\n      start_new_game();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"block\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"none\";\n    }\n  }\n\n  function is_valid_input_number(key) {\n    if (key === '1' || key === '2' || key === '3' || key === '4' || key === '5' || \n        key === '6' || key === '7' || key === '8' || key === '9' || key === '0') {\n        return true;\n      } else {\n        return false;\n      }\n  }\n  // Start a New Game\n  useEffect(() => {\n    \n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function(e){   \n      if(e.target !== document.getElementsByClassName('sudoku_game')[0] &&\n        !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      } \n    });\n    createNewGame();\n  }, []);\n  \n\n  return (\n    <div>\n      <select id=\"sudoku_mode_options\" name=\"sudoku_mode_options\" defaultValue=\"Sudoku Game\" onChange={change_sudoku_mode}>\n        <option value=\"sudoku_game_option\">Sudoku Game</option>\n        <option value=\"sudoku_solver_option\">Sudoku Solver</option>\n      </select>\n\n      <div className={overlay?\"container blur\":\"container \"}  >\n        <div className=\"innercontainer center_div\">\n          <GameSection\n            onClick={(indexOfArray) => onClickCell(indexOfArray)}\n          />\n          <StatusSection\n            onClickNumber={(number) => onClickNumber(number)}\n            onChange={(e) => onChangeDifficulty(e)}\n            undo_move={undo_move}\n            clear_cell={clear_cell}\n            cell_hint={cell_hint}\n            change_mistakes_mode={change_mistakes_mode}\n            change_fast_mode={change_fast_mode}\n          />\n        </div>\n      </div>\n      \n      <span id=\"sudoku_game_op_btns\">\n        <button className='new_game_btn' onClick={open_new_game_modal}>New Game</button>\n        <button className='new_game_btn' onClick={complete_board}>Complete</button>\n      </span>\n      <span id=\"sudoku_solver_op_btns\">\n        <button className='new_game_btn' onClick={user_input_board_mode}>Start Over</button>\n        <button className='new_game_btn' onClick={user_input_solve}>Solve</button>\n      </span>\n      \n      <div className=\"new_game_modal\" id=\"new_game_modal\">\n        <div className=\"ngm_container\">\n          <div className='nbm_text'>Do you wish to start a new game?</div>\n          <button className='ngb' onClick={start_new_game}>Yes</button>\n          <button className='ngb' onClick={close_new_game_modal}>No</button>\n          <button className=\"ngm_close\" onClick={close_new_game_modal}>X</button>\n        </div>\n      </div>\n\n      <div className= { overlay ? \"overlay o_block\" : \"overlay\" } onClick={onClickOverlay} >\n        <h2 className=\"gameover_text\">\n          <span>You </span>\n          <span className=\"gameover_col_1\">Solved </span> \n          <span className=\"gameover_col_2\">IT! </span>\n        </h2>\n      </div>\n</div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}