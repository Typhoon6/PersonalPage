{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _slicedToArray from\"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import{getSudoku}from'./sudoku.js';// An empty board has 0 in every position\nvar nullArray=['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'];// Gets the coordinates of the center cell of the specified box.\nfunction _getBoxCenter(box){switch(box){case 0:return[1,1];case 1:return[1,4];case 2:return[1,7];case 3:return[4,1];case 4:return[4,4];case 5:return[4,7];case 6:return[7,1];case 7:return[7,4];default:return[7,7];}}function _getIndexOfCell(box,cell){var _getBoxCenter2=_getBoxCenter(box),_getBoxCenter3=_slicedToArray(_getBoxCenter2,2),row=_getBoxCenter3[0],column=_getBoxCenter3[1];// eslint-disable-next-line\nswitch(cell){case 0:{row--;column--;break;}case 1:{row--;break;}case 2:{row--;column++;break;}case 3:{column--;break;}case 4:{break;}case 5:{column++;break;}case 6:{row++;column--;break;}case 7:{row++;break;}case 8:{row++;column++;break;}}return row*9+column;}// Checks if Cell is available or not\nfunction _cellAvailable(tempInitArray,box,value){return tempInitArray[_getIndexOfCell(box,value)]==='0'?0:1;}// Generate Unique Sudoku puzzle from Sudoku.\nfunction _generateUniqueSudoku(solvedArray,difficulty,e){var currentDifficulty=difficulty;var minimumCells,maximumCells,totalCells,box,cell;var tempInitArray=nullArray.slice();var boxCounts=[0,0,0,0,0,0,0,0,0];var boxesAvailable=[];var cellsAvailable=[];if(e)currentDifficulty=e.target.value;if(currentDifficulty==='Easy'){minimumCells=3;maximumCells=7;totalCells=45;}else if(currentDifficulty==='Medium'){minimumCells=2;maximumCells=6;totalCells=40;}else{minimumCells=1;maximumCells=5;totalCells=30;}for(var j=0;j<9;j++){boxCounts[j]=_cellAvailable(tempInitArray,j,0)+_cellAvailable(tempInitArray,j,1)+_cellAvailable(tempInitArray,j,2)+_cellAvailable(tempInitArray,j,3)+_cellAvailable(tempInitArray,j,4)+_cellAvailable(tempInitArray,j,5)+_cellAvailable(tempInitArray,j,6)+_cellAvailable(tempInitArray,j,7)+_cellAvailable(tempInitArray,j,8);}for(var i=0;i<totalCells;i++){boxesAvailable=[];for(var _j=0;_j<9;_j++){if(boxCounts[_j]<minimumCells){boxesAvailable.push(_j);}}if(boxesAvailable){for(var _j2=0;_j2<9;_j2++){if(boxCounts[_j2]<maximumCells){boxesAvailable.push(_j2);}}}box=boxesAvailable[Math.random()*boxesAvailable.length|0];cellsAvailable=[];for(var _j3=0;_j3<9;_j3++){if(tempInitArray[_getIndexOfCell(box,_j3)]==='0'){cellsAvailable.push(_j3);}}cell=cellsAvailable[Math.random()*cellsAvailable.length|0];var index=_getIndexOfCell(box,cell);tempInitArray[index]=solvedArray[index];boxCounts[box]++;}return tempInitArray;}// Create a random and VALID sudoku\nexport var getUniqueSudoku=function getUniqueSudoku(difficulty,e){var temporaryInitArray=nullArray.slice();var temporarySolvedArray=nullArray.slice();var sudoku=getSudoku();var str=sudoku.generate(60);_toConsumableArray(str).forEach(function(value,index){temporaryInitArray[index]=value==='.'?'0':value;});// From sudoku JS library\nstr=sudoku.solve(str);_toConsumableArray(str).forEach(function(value,index){temporarySolvedArray[index]=value;});// Get unique sudoku solution \ntemporaryInitArray=_generateUniqueSudoku(temporarySolvedArray,difficulty,e);return[temporaryInitArray,temporarySolvedArray];};","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/solver/UniqueSudoku.js"],"names":["getSudoku","nullArray","_getBoxCenter","box","_getIndexOfCell","cell","row","column","_cellAvailable","tempInitArray","value","_generateUniqueSudoku","solvedArray","difficulty","e","currentDifficulty","minimumCells","maximumCells","totalCells","slice","boxCounts","boxesAvailable","cellsAvailable","target","j","i","push","Math","random","length","index","getUniqueSudoku","temporaryInitArray","temporarySolvedArray","sudoku","str","generate","forEach","solve"],"mappings":"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","sourcesContent":["import { getSudoku } from './sudoku.js';\n\n// An empty board has 0 in every position\nlet nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n \n// Gets the coordinates of the center cell of the specified box.\nfunction _getBoxCenter(box) {\n  switch(box) {\n    case 0: return [1,1];\n    case 1: return [1,4];\n    case 2: return [1,7];\n    case 3: return [4,1];\n    case 4: return [4,4];\n    case 5: return [4,7];\n    case 6: return [7,1];\n    case 7: return [7,4];\n    default: return [7,7];\n  }\n}\n \nfunction _getIndexOfCell(box, cell) {\n  let [row, column] = _getBoxCenter(box);\n  // eslint-disable-next-line\n  switch(cell) {\n    case 0: {row--; column--; break;}\n    case 1: {row--; break;}\n    case 2: {row--; column++; break;}\n    case 3: {column--; break;}\n    case 4: {break;}\n    case 5: {column++; break;}\n    case 6: {row++; column--; break;}\n    case 7: {row++; break;}\n    case 8: {row++; column++; break;}\n  }\n  return row * 9 + column;\n}\n \n// Checks if Cell is available or not\nfunction _cellAvailable(tempInitArray, box, value) {\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n}\n \n// Generate Unique Sudoku puzzle from Sudoku.\nfunction _generateUniqueSudoku(solvedArray, difficulty, e) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [ 0,0,0,\n                    0,0,0,\n                    0,0,0 ];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n\n  if (e)\n    currentDifficulty = e.target.value;\n\n  if (currentDifficulty === 'Easy') {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  }\n  else if (currentDifficulty === 'Medium') {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  }\n  else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] =  _cellAvailable(tempInitArray, j, 0) +\n                    _cellAvailable(tempInitArray, j, 1) +\n                    _cellAvailable(tempInitArray, j, 2) +\n                    _cellAvailable(tempInitArray, j, 3) +\n                    _cellAvailable(tempInitArray, j, 4) +\n                    _cellAvailable(tempInitArray, j, 5) +\n                    _cellAvailable(tempInitArray, j, 6) +\n                    _cellAvailable(tempInitArray, j, 7) +\n                    _cellAvailable(tempInitArray, j, 8);\n  }\n\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n\n    cellsAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if ( tempInitArray[_getIndexOfCell(box, j)] === '0') {\n        cellsAvailable.push(j);\n      }\n    }\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n\n    let index = _getIndexOfCell(box, cell);\n    tempInitArray[index] = solvedArray[index]\n    boxCounts[box]++;\n  }\n  return tempInitArray;\n}\n\n// Create a random and VALID sudoku\nexport const getUniqueSudoku = (difficulty, e) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n\n  let str = sudoku.generate(60);\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === '.'\n                        ? '0'\n                        : value;\n  });\n\n  // From sudoku JS library\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n\n  // Get unique sudoku solution \n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\n  return [temporaryInitArray, temporarySolvedArray];\n}\n"]},"metadata":{},"sourceType":"module"}