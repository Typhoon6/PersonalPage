{"ast":null,"code":"// Sudoku Generator and Solver for node.js\n// Copyright (c) 2011 Blagovest Dachev.  All rights reserved.\n//\n// This is a port of David Bau's python  implementation:\n// http://davidbau.com/archives/2006/09/04/sudoku_generator.html\nvar undefined;\n\nvar _ = require('underscore');\n\nfunction makepuzzle(board) {\n  var puzzle = [];\n  var deduced = makeArray(81, null);\n\n  var order = _.range(81);\n\n  shuffleArray(order);\n\n  for (var i = 0; i < order.length; i++) {\n    var pos = order[i];\n\n    if (deduced[pos] == null) {\n      puzzle.push({\n        pos: pos,\n        num: board[pos]\n      });\n      deduced[pos] = board[pos];\n      deduce(deduced);\n    }\n  }\n\n  shuffleArray(puzzle);\n\n  for (var i = puzzle.length - 1; i >= 0; i--) {\n    var e = puzzle[i];\n    removeElement(puzzle, i);\n    var rating = checkpuzzle(boardforentries(puzzle), board);\n\n    if (rating == -1) {\n      puzzle.push(e);\n    }\n  }\n\n  return boardforentries(puzzle);\n}\n\nfunction ratepuzzle(puzzle, samples) {\n  var total = 0;\n\n  for (var i = 0; i < samples; i++) {\n    var tuple = solveboard(puzzle);\n\n    if (tuple.answer == null) {\n      return -1;\n    }\n\n    total += tuple.state.length;\n  }\n\n  return total / samples;\n}\n\nfunction checkpuzzle(puzzle, board) {\n  if (board == undefined) {\n    board = null;\n  }\n\n  var tuple1 = solveboard(puzzle);\n\n  if (tuple1.answer == null) {\n    return -1;\n  }\n\n  if (board != null && boardmatches(board, tuple1.answer) == false) {\n    return -1;\n  }\n\n  var difficulty = tuple1.state.length;\n  var tuple2 = solvenext(tuple1.state);\n\n  if (tuple2.answer != null) {\n    return -1;\n  }\n\n  return difficulty;\n}\n\nfunction solvepuzzle(board) {\n  return solveboard(board).answer;\n}\n\nfunction solveboard(original) {\n  var board = [].concat(original);\n  var guesses = deduce(board);\n\n  if (guesses == null) {\n    return {\n      state: [],\n      answer: board\n    };\n  }\n\n  var track = [{\n    guesses: guesses,\n    count: 0,\n    board: board\n  }];\n  return solvenext(track);\n}\n\nfunction solvenext(remembered) {\n  while (remembered.length > 0) {\n    var tuple1 = remembered.pop();\n\n    if (tuple1.count >= tuple1.guesses.length) {\n      continue;\n    }\n\n    remembered.push({\n      guesses: tuple1.guesses,\n      count: tuple1.count + 1,\n      board: tuple1.board\n    });\n    var workspace = [].concat(tuple1.board);\n    var tuple2 = tuple1.guesses[tuple1.count];\n    workspace[tuple2.pos] = tuple2.num;\n    var guesses = deduce(workspace);\n\n    if (guesses == null) {\n      return {\n        state: remembered,\n        answer: workspace\n      };\n    }\n\n    remembered.push({\n      guesses: guesses,\n      count: 0,\n      board: workspace\n    });\n  }\n\n  return {\n    state: [],\n    answer: null\n  };\n}\n\nfunction deduce(board) {\n  while (true) {\n    var stuck = true;\n    var guess = null;\n    var count = 0; // fill in any spots determined by direct conflicts\n\n    var tuple1 = figurebits(board);\n    var allowed = tuple1.allowed;\n    var needed = tuple1.needed;\n\n    for (var pos = 0; pos < 81; pos++) {\n      if (board[pos] == null) {\n        var numbers = listbits(allowed[pos]);\n\n        if (numbers.length == 0) {\n          return [];\n        } else if (numbers.length == 1) {\n          board[pos] = numbers[0];\n          stuck = false;\n        } else if (stuck == true) {\n          var t = _.map(numbers, function (val, key) {\n            return {\n              pos: pos,\n              num: val\n            };\n          });\n\n          var tuple2 = pickbetter(guess, count, t);\n          guess = tuple2.guess;\n          count = tuple2.count;\n        }\n      }\n    }\n\n    if (stuck == false) {\n      var tuple3 = figurebits(board);\n      allowed = tuple3.allowed;\n      needed = tuple3.needed;\n    } // fill in any spots determined by elimination of other locations\n\n\n    for (var axis = 0; axis < 3; axis++) {\n      for (var x = 0; x < 9; x++) {\n        var numbers = listbits(needed[axis * 9 + x]);\n\n        for (var i = 0; i < numbers.length; i++) {\n          var n = numbers[i];\n          var bit = 1 << n;\n          var spots = [];\n\n          for (var y = 0; y < 9; y++) {\n            var pos = posfor(x, y, axis);\n\n            if (allowed[pos] & bit) {\n              spots.push(pos);\n            }\n          }\n\n          if (spots.length == 0) {\n            return [];\n          } else if (spots.length == 1) {\n            board[spots[0]] = n;\n            stuck = false;\n          } else if (stuck) {\n            var t = _.map(spots, function (val, key) {\n              return {\n                pos: val,\n                num: n\n              };\n            });\n\n            var tuple4 = pickbetter(guess, count, t);\n            guess = tuple4.guess;\n            count = tuple4.count;\n          }\n        }\n      }\n    }\n\n    if (stuck == true) {\n      if (guess != null) {\n        shuffleArray(guess);\n      }\n\n      return guess;\n    }\n  }\n}\n\nfunction figurebits(board) {\n  var needed = [];\n\n  var allowed = _.map(board, function (val, key) {\n    return val == null ? 511 : 0;\n  }, []);\n\n  for (var axis = 0; axis < 3; axis++) {\n    for (var x = 0; x < 9; x++) {\n      var bits = axismissing(board, x, axis);\n      needed.push(bits);\n\n      for (var y = 0; y < 9; y++) {\n        var pos = posfor(x, y, axis);\n        allowed[pos] = allowed[pos] & bits;\n      }\n    }\n  }\n\n  return {\n    allowed: allowed,\n    needed: needed\n  };\n}\n\nfunction posfor(x, y, axis) {\n  if (axis == undefined) {\n    axis = 0;\n  }\n\n  if (axis == 0) {\n    return x * 9 + y;\n  } else if (axis == 1) {\n    return y * 9 + x;\n  }\n\n  return [0, 3, 6, 27, 30, 33, 54, 57, 60][x] + [0, 1, 2, 9, 10, 11, 18, 19, 20][y];\n}\n\nfunction axisfor(pos, axis) {\n  if (axis == 0) {\n    return Math.floor(pos / 9);\n  } else if (axis == 1) {\n    return pos % 9;\n  }\n\n  return Math.floor(pos / 27) * 3 + Math.floor(pos / 3) % 3;\n}\n\nfunction axismissing(board, x, axis) {\n  var bits = 0;\n\n  for (var y = 0; y < 9; y++) {\n    var e = board[posfor(x, y, axis)];\n\n    if (e != null) {\n      bits |= 1 << e;\n    }\n  }\n\n  return 511 ^ bits;\n}\n\nfunction listbits(bits) {\n  var list = [];\n\n  for (var y = 0; y < 9; y++) {\n    if ((bits & 1 << y) != 0) {\n      list.push(y);\n    }\n  }\n\n  return list;\n}\n\nfunction allowed(board, pos) {\n  var bits = 511;\n\n  for (var axis = 0; axis < 3; axis++) {\n    var x = axisfor(pos, axis);\n    bits = bits & axismissing(board, x, axis);\n  }\n\n  return bits;\n} // TODO: make sure callers utilize the return value correctly\n\n\nfunction pickbetter(b, c, t) {\n  if (b == null || t.length < b.length) {\n    return {\n      guess: t,\n      count: 1\n    };\n  } else if (t.length > b.length) {\n    return {\n      guess: b,\n      count: c\n    };\n  } else if (randomInt(c) == 0) {\n    return {\n      guess: t,\n      count: c + 1\n    };\n  }\n\n  return {\n    guess: b,\n    count: c + 1\n  };\n}\n\nfunction boardforentries(entries) {\n  var board = _.map(_.range(81), function (val, key) {\n    return null;\n  });\n\n  for (var i = 0; i < entries.length; i++) {\n    var item = entries[i];\n    var pos = item.pos;\n    var num = item.num;\n    board[pos] = num;\n  }\n\n  return board;\n}\n\nfunction boardmatches(b1, b2) {\n  for (var i = 0; i < 81; i++) {\n    if (b1[i] != b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * (max + 1));\n}\n\nfunction shuffleArray(original) {\n  // Swap each element with another randomly selected one.\n  for (var i = 0; i < original.length; i++) {\n    var j = i;\n\n    while (j == i) {\n      j = Math.floor(Math.random() * original.length);\n    }\n\n    var contents = original[i];\n    original[i] = original[j];\n    original[j] = contents;\n  }\n}\n\nfunction removeElement(array, from, to) {\n  var rest = array.slice((to || from) + 1 || array.length);\n  array.length = from < 0 ? array.length + from : from;\n  return array.push.apply(array, rest);\n}\n\n;\n\nfunction makeArray(length, value) {\n  return _.map(_.range(length), function (val, key) {\n    return value;\n  });\n}\n\nmodule.exports = {\n  makepuzzle: function () {\n    return makepuzzle(solvepuzzle(makeArray(81, null)));\n  },\n  solvepuzzle: solvepuzzle,\n  ratepuzzle: ratepuzzle,\n  posfor: posfor\n};","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/node_modules/sudoku/index.js"],"names":["undefined","_","require","makepuzzle","board","puzzle","deduced","makeArray","order","range","shuffleArray","i","length","pos","push","num","deduce","e","removeElement","rating","checkpuzzle","boardforentries","ratepuzzle","samples","total","tuple","solveboard","answer","state","tuple1","boardmatches","difficulty","tuple2","solvenext","solvepuzzle","original","concat","guesses","track","count","remembered","pop","workspace","stuck","guess","figurebits","allowed","needed","numbers","listbits","t","map","val","key","pickbetter","tuple3","axis","x","n","bit","spots","y","posfor","tuple4","bits","axismissing","axisfor","Math","floor","list","b","c","randomInt","entries","item","b1","b2","max","random","j","contents","array","from","to","rest","slice","apply","value","module","exports"],"mappings":"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","sourcesContent":["// Sudoku Generator and Solver for node.js\n// Copyright (c) 2011 Blagovest Dachev.  All rights reserved.\n//\n// This is a port of David Bau's python  implementation:\n// http://davidbau.com/archives/2006/09/04/sudoku_generator.html\n\nvar undefined;\nvar _ = require('underscore');\n\nfunction makepuzzle(board) {\n\tvar puzzle  = [];\n\tvar deduced = makeArray(81, null);\n\tvar order   = _.range(81);\n\n\tshuffleArray(order);\n\n\tfor (var i = 0; i < order.length; i++) {\n\t\tvar pos = order[i];\n\n\t\tif (deduced[pos] == null) {\n\t\t\tpuzzle.push({pos:pos, num:board[pos]});\n\t\t\tdeduced[pos] = board[pos];\n\t\t\tdeduce(deduced);\n\t\t}\n\t}\n\n\tshuffleArray(puzzle);\n\n\tfor (var i = puzzle.length - 1; i >= 0; i--) {\n\t\tvar e = puzzle[i];\n\t\tremoveElement(puzzle, i);\n\n\t\tvar rating = checkpuzzle(boardforentries(puzzle), board);\n\t\tif (rating == -1) {\n\t\t\tpuzzle.push(e);\n\t\t}\n\t}\n\n\treturn boardforentries(puzzle);\n}\n\nfunction ratepuzzle(puzzle, samples) {\n\tvar total = 0;\n\n\tfor (var i = 0; i < samples; i++) {\n\t\tvar tuple = solveboard(puzzle);\n\n\t\tif (tuple.answer == null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\ttotal += tuple.state.length;\n\t}\n\n\treturn total / samples;\n}\n\nfunction checkpuzzle(puzzle, board) {\n\tif (board == undefined) {\n\t\tboard = null;\n\t}\n\n\tvar tuple1 = solveboard(puzzle);\n\tif (tuple1.answer == null) {\n\t\treturn -1;\n\t}\n\n\tif (board != null && boardmatches(board, tuple1.answer) == false) {\n\t\treturn -1;\n\t}\n\n\tvar difficulty = tuple1.state.length;\n\tvar tuple2     = solvenext(tuple1.state);\n\n\tif (tuple2.answer != null) {\n\t\treturn -1;\n\t}\n\t\n\treturn difficulty;\n}\n\nfunction solvepuzzle(board) {\n    return solveboard(board).answer;\n}\n\nfunction solveboard(original) {\n\tvar board   = [].concat(original);\n\tvar guesses = deduce(board);\n\n\tif (guesses == null) {\n\t\treturn {state:[], answer:board};\n\t}\n\n\tvar track = [{guesses:guesses, count:0, board:board}];\n\treturn solvenext(track);\n}\n\nfunction solvenext(remembered) {\n    while (remembered.length > 0) {\n    \tvar tuple1 = remembered.pop();\n\n    \tif (tuple1.count >= tuple1.guesses.length) {\n    \t\tcontinue;\n    \t}\n \n    \tremembered.push({guesses:tuple1.guesses, count:tuple1.count+1, board:tuple1.board});\n    \tvar workspace = [].concat(tuple1.board);\n    \tvar tuple2    = tuple1.guesses[tuple1.count];\n\n    \tworkspace[tuple2.pos] = tuple2.num;\n\n    \tvar guesses = deduce(workspace);\n\n    \tif (guesses == null) {\n\t    \treturn {state:remembered, answer:workspace};\n\t    }\n\n    \tremembered.push({guesses:guesses, count:0, board:workspace});\n\t}\n\n    return {state:[], answer:null};\n}\n\nfunction deduce(board) {\n\twhile (true) {\n\t\tvar stuck = true;\n\t\tvar guess = null;\n\t\tvar count = 0;\n\n\t    // fill in any spots determined by direct conflicts\n\t    var tuple1  = figurebits(board);\n\t    var allowed = tuple1.allowed;\n\t    var needed  = tuple1.needed;\n\n\t    for (var pos = 0; pos < 81; pos++) {\n\t    \tif (board[pos] == null) {\n\t    \t\tvar numbers = listbits(allowed[pos]);\n\t    \t\tif (numbers.length == 0) {\n\t    \t\t\treturn [];\n\t    \t\t}\n\t    \t\telse if (numbers.length == 1) {\n\t    \t\t\tboard[pos] = numbers[0];\n\t    \t\t\tstuck = false;\n\t    \t\t}\n\t    \t\telse if (stuck == true) {\n\t    \t\t\tvar t = _.map(numbers, function(val, key) {\n\t    \t\t\t\treturn {pos:pos, num:val};\n\t    \t\t\t});\n\n\t    \t\t\tvar tuple2 = pickbetter(guess, count, t);\n\t    \t\t\tguess = tuple2.guess;\n\t    \t\t\tcount = tuple2.count;\n\t    \t\t}\n\t    \t}\n\t    }\n\n\t    if (stuck == false) {\n\t\t    var tuple3  = figurebits(board);\n\t\t    allowed = tuple3.allowed;\n\t\t    needed  = tuple3.needed;\n\t    }\n\n    \t// fill in any spots determined by elimination of other locations\n    \tfor (var axis = 0; axis < 3; axis++) {\n\t    \tfor (var x = 0; x < 9; x++) {\n        \t\tvar numbers = listbits(needed[axis * 9 + x]);\n\n\t\t    \tfor (var i = 0; i < numbers.length; i++) {\n\t\t    \t\tvar n     = numbers[i];\n\t\t            var bit   = 1 << n;\n          \t\t\tvar spots = [];\n\n\t\t\t    \tfor (var y = 0; y < 9; y++) {\n\t\t\t    \t\tvar pos = posfor(x, y, axis);\n\t\t\t    \t\tif (allowed[pos] & bit) {\n\t\t\t\t    \t\tspots.push(pos);\n\t\t\t\t    \t}\n\t\t\t    \t}\n\n\t\t\t    \tif (spots.length == 0) {\n\t\t\t\t    \treturn [];\n\t\t\t\t    }\n\t\t\t\t    else if (spots.length == 1) {\n\t\t\t\t\t    board[spots[0]] = n;\n\t\t\t\t\t    stuck = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (stuck) {\n\t\t    \t\t\tvar t = _.map(spots, function(val, key) {\n\t\t    \t\t\t\treturn {pos:val, num:n};\n\t\t    \t\t\t});\n\n\t\t    \t\t\tvar tuple4 = pickbetter(guess, count, t);\n\t\t    \t\t\tguess = tuple4.guess;\n\t\t    \t\t\tcount = tuple4.count;\n\t\t\t\t\t}\n\t\t    \t}\n\t    \t}\n    \t}\n\n    \tif (stuck == true) {\n    \t\tif (guess != null) {\n    \t\t\tshuffleArray(guess);\n    \t\t}\n\n    \t\treturn guess;\n    \t}\n\t}\n}\n\nfunction figurebits(board) {\n\tvar needed  = [];\n\tvar allowed = _.map(board, function(val, key) {\n\t\treturn val == null ? 511 : 0;\n\t}, []);\n\n\tfor (var axis = 0; axis < 3; axis++) {\n\t\tfor (var x = 0; x < 9; x++) {\n\t\t\tvar bits = axismissing(board, x, axis);\n\t\t\tneeded.push(bits);\n\n\t\t    for (var y = 0; y < 9; y++) {\n\t\t    \tvar pos = posfor(x, y, axis);\n\t\t        allowed[pos] = allowed[pos] & bits;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {allowed:allowed, needed:needed};\n}\n\nfunction posfor(x, y, axis) {\n\tif (axis == undefined) { axis = 0; }\n\n    if (axis == 0) {\n\t    return x * 9 + y;\n\t}\n\telse if (axis == 1) {\n\t\treturn y * 9 + x;\n\t}\n\n\treturn ([0,3,6,27,30,33,54,57,60][x] + [0,1,2,9,10,11,18,19,20][y])\n}\n\nfunction axisfor(pos, axis) {\n\tif (axis == 0) {\n\t\treturn Math.floor(pos / 9);\n\t}\n\telse if (axis == 1) {\n\t\treturn pos % 9;\n\t}\n\n\treturn Math.floor(pos / 27) * 3 + Math.floor(pos / 3) % 3;\n}\n\nfunction axismissing(board, x, axis) {\n\tvar bits = 0;\n\n\tfor (var y = 0; y < 9; y++) {\n\t\tvar e = board[posfor(x, y, axis)];\n\n\t\tif (e != null) {\n\t\t\tbits |= 1 << e;\n\t\t}\n\t}\n\n\treturn 511 ^ bits;\n}\n\nfunction listbits(bits) {\n    var list = [];\n\tfor (var y = 0; y < 9; y++) {\n\t\tif ((bits & (1 << y)) != 0) {\n\t\t\tlist.push(y);\n\t\t}\n\t}\n\n  return list;\n}\n\nfunction allowed(board, pos) {\n\tvar bits = 511;\n\n\tfor (var axis = 0; axis < 3; axis++) {\n\t\tvar x = axisfor(pos, axis);\n\t\tbits = bits & axismissing(board, x, axis);\n\t}\n\n\treturn bits;\n}\n\n// TODO: make sure callers utilize the return value correctly\nfunction pickbetter(b, c, t) {\n\tif (b == null || t.length < b.length) {\n\t\treturn {guess:t, count:1};\n\t}\n\telse if (t.length > b.length) {\n\t\treturn {guess:b, count:c};\n\t}\n\telse if (randomInt(c) == 0) {\n\t\treturn {guess:t, count:c+1};\n\t}\n\n\treturn {guess:b, count:c+1};\n}\n\nfunction boardforentries(entries) {\n\tvar board = _.map(_.range(81), function(val, key) {\n\t\treturn null;\n\t});\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar item = entries[i];\n\t\tvar pos  = item.pos;\n\t\tvar num  = item.num;\n\n\t\tboard[pos] = num;\n\t}\n\n\treturn board;\n}\n\nfunction boardmatches(b1, b2) {\n\tfor (var i = 0; i < 81; i++) {\n\t\tif (b1[i] != b2[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction randomInt(max) {\n\treturn Math.floor(Math.random() * (max+1));\n}\n\nfunction shuffleArray(original) {\n\t// Swap each element with another randomly selected one.\n    for (var i = 0; i < original.length; i++) {\n        var j = i;\n        while (j == i) {\n            j = Math.floor(Math.random() * original.length);\n        }\n        var contents = original[i];\n        original[i]  = original[j];\n        original[j]  = contents;\n    }\n}\n\nfunction removeElement(array, from, to) {\n    var rest = array.slice((to || from) + 1 || array.length);\n    array.length = from < 0 ? array.length + from : from;\n    return array.push.apply(array, rest);\n};\n\nfunction makeArray(length, value) {\n\treturn _.map(_.range(length), function(val, key) {\n\t\treturn value;\n\t})\n}\n\nmodule.exports = {\n\tmakepuzzle  : function () { return makepuzzle(solvepuzzle(makeArray(81, null))); },\n\tsolvepuzzle : solvepuzzle,\n\tratepuzzle  : ratepuzzle,\n\tposfor      : posfor\n};\n\n"]},"metadata":{},"sourceType":"script"}