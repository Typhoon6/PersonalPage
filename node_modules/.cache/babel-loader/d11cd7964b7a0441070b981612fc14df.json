{"ast":null,"code":"import os from 'os';\nimport escapeStringRegexp from 'escape-string-regexp';\nvar extractPathRegex = /\\s+at.*[(\\s](.*)\\)?/;\nvar pathRegex = /^(?:(?:(?:node|node:[\\w/]+|(?:(?:node:)?internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)(?:\\.js)?:\\d+:\\d+)|native)/;\nvar homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir().replace(/\\\\/g, '/');\nexport default function cleanStack(stack) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$pretty = _ref.pretty,\n      pretty = _ref$pretty === void 0 ? false : _ref$pretty,\n      basePath = _ref.basePath;\n\n  var basePathRegex = basePath && new RegExp(\"(at | \\\\()\".concat(escapeStringRegexp(basePath.replace(/\\\\/g, '/'))), 'g');\n\n  if (typeof stack !== 'string') {\n    return undefined;\n  }\n\n  return stack.replace(/\\\\/g, '/').split('\\n').filter(function (line) {\n    var pathMatches = line.match(extractPathRegex);\n\n    if (pathMatches === null || !pathMatches[1]) {\n      return true;\n    }\n\n    var match = pathMatches[1]; // Electron\n\n    if (match.includes('.app/Contents/Resources/electron.asar') || match.includes('.app/Contents/Resources/default_app.asar')) {\n      return false;\n    }\n\n    return !pathRegex.test(match);\n  }).filter(function (line) {\n    return line.trim() !== '';\n  }).map(function (line) {\n    if (basePathRegex) {\n      line = line.replace(basePathRegex, '$1');\n    }\n\n    if (pretty) {\n      line = line.replace(extractPathRegex, function (m, p1) {\n        return m.replace(p1, p1.replace(homeDir, '~'));\n      });\n    }\n\n    return line;\n  }).join('\\n');\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/node_modules/pokedex-promise-v2/node_modules/clean-stack/index.js"],"names":["os","escapeStringRegexp","extractPathRegex","pathRegex","homeDir","homedir","replace","cleanStack","stack","pretty","basePath","basePathRegex","RegExp","undefined","split","filter","line","pathMatches","match","includes","test","trim","map","m","p1","join"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,IAAMC,gBAAgB,GAAG,qBAAzB;AACA,IAAMC,SAAS,GAAG,yIAAlB;AACA,IAAMC,OAAO,GAAG,OAAOJ,EAAE,CAACK,OAAV,KAAsB,WAAtB,GAAoC,EAApC,GAAyCL,EAAE,CAACK,OAAH,GAAaC,OAAb,CAAqB,KAArB,EAA4B,GAA5B,CAAzD;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA4D;AAAA,iFAAJ,EAAI;AAAA,yBAAhCC,MAAgC;AAAA,MAAhCA,MAAgC,4BAAvB,KAAuB;AAAA,MAAhBC,QAAgB,QAAhBA,QAAgB;;AAC1E,MAAMC,aAAa,GAAGD,QAAQ,IAAI,IAAIE,MAAJ,qBAAwBX,kBAAkB,CAACS,QAAQ,CAACJ,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAD,CAA1C,GAA4E,GAA5E,CAAlC;;AAEA,MAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAOK,SAAP;AACA;;AAED,SAAOL,KAAK,CAACF,OAAN,CAAc,KAAd,EAAqB,GAArB,EACLQ,KADK,CACC,IADD,EAELC,MAFK,CAEE,UAAAC,IAAI,EAAI;AACf,QAAMC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAWhB,gBAAX,CAApB;;AACA,QAAIe,WAAW,KAAK,IAAhB,IAAwB,CAACA,WAAW,CAAC,CAAD,CAAxC,EAA6C;AAC5C,aAAO,IAAP;AACA;;AAED,QAAMC,KAAK,GAAGD,WAAW,CAAC,CAAD,CAAzB,CANe,CAQf;;AACA,QACCC,KAAK,CAACC,QAAN,CAAe,uCAAf,KACAD,KAAK,CAACC,QAAN,CAAe,0CAAf,CAFD,EAGE;AACD,aAAO,KAAP;AACA;;AAED,WAAO,CAAChB,SAAS,CAACiB,IAAV,CAAeF,KAAf,CAAR;AACA,GAnBK,EAoBLH,MApBK,CAoBE,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACK,IAAL,OAAgB,EAApB;AAAA,GApBN,EAqBLC,GArBK,CAqBD,UAAAN,IAAI,EAAI;AACZ,QAAIL,aAAJ,EAAmB;AAClBK,MAAAA,IAAI,GAAGA,IAAI,CAACV,OAAL,CAAaK,aAAb,EAA4B,IAA5B,CAAP;AACA;;AAED,QAAIF,MAAJ,EAAY;AACXO,MAAAA,IAAI,GAAGA,IAAI,CAACV,OAAL,CAAaJ,gBAAb,EAA+B,UAACqB,CAAD,EAAIC,EAAJ;AAAA,eAAWD,CAAC,CAACjB,OAAF,CAAUkB,EAAV,EAAcA,EAAE,CAAClB,OAAH,CAAWF,OAAX,EAAoB,GAApB,CAAd,CAAX;AAAA,OAA/B,CAAP;AACA;;AAED,WAAOY,IAAP;AACA,GA/BK,EAgCLS,IAhCK,CAgCA,IAhCA,CAAP;AAiCA","sourcesContent":["import os from 'os';\nimport escapeStringRegexp from 'escape-string-regexp';\n\nconst extractPathRegex = /\\s+at.*[(\\s](.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|node:[\\w/]+|(?:(?:node:)?internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)(?:\\.js)?:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir().replace(/\\\\/g, '/');\n\nexport default function cleanStack(stack, {pretty = false, basePath} = {}) {\n\tconst basePathRegex = basePath && new RegExp(`(at | \\\\()${escapeStringRegexp(basePath.replace(/\\\\/g, '/'))}`, 'g');\n\n\tif (typeof stack !== 'string') {\n\t\treturn undefined;\n\t}\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (basePathRegex) {\n\t\t\t\tline = line.replace(basePathRegex, '$1');\n\t\t\t}\n\n\t\t\tif (pretty) {\n\t\t\t\tline = line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n}\n"]},"metadata":{},"sourceType":"module"}