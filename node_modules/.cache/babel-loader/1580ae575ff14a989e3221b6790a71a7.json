{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\src\\\\pages\\\\Sudoku\\\\components\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSudokuContext } from '../context/SudokuContext';\nimport moment from 'moment'; // Timer of game time\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Timer = () => {\n  _s();\n\n  let [time, setTime] = useState(moment());\n  let {\n    timeGameStarted,\n    won\n  } = useSudokuContext(); // Increase timer every second\n\n  useEffect(() => {\n    if (!won) {\n      setTimeout(() => setTime(moment()), 1000);\n    }\n\n    ;\n  });\n\n  function getTimer() {\n    let secondsTotal = time.diff(timeGameStarted, 'seconds');\n    if (secondsTotal <= 0) return '00:00';\n    let duration = moment.duration(secondsTotal, 'seconds');\n    let hours = duration.hours();\n    let minutes = duration.minutes();\n    let seconds = duration.seconds();\n    let readable_time = '';\n    readable_time += hours ? '' + hours + ':' : '';\n    readable_time += minutes ? (minutes < 10 ? '0' : '') + minutes + ':' : '00:';\n    readable_time += seconds < 10 ? '0' + seconds : seconds;\n    return readable_time;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"timer\",\n    children: getTimer()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"4oxaz+PNBY93f5ucOdoIFtkfGCo=\", false, function () {\n  return [useSudokuContext];\n});\n\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/components/Timer.js"],"names":["React","useState","useEffect","useSudokuContext","moment","Timer","time","setTime","timeGameStarted","won","setTimeout","getTimer","secondsTotal","diff","duration","hours","minutes","seconds","readable_time"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;;AACA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEzB,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACG,MAAM,EAAP,CAA9B;AACA,MAAI;AAAEI,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA2BN,gBAAgB,EAA/C,CAHyB,CAKzB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,GAAL,EAAU;AAAEC,MAAAA,UAAU,CAAC,MAAMH,OAAO,CAACH,MAAM,EAAP,CAAd,EAA0B,IAA1B,CAAV;AAA2C;;AAAA;AACxD,GAFQ,CAAT;;AAMA,WAASO,QAAT,GAAoB;AAElB,QAAIC,YAAY,GAAGN,IAAI,CAACO,IAAL,CAAUL,eAAV,EAA2B,SAA3B,CAAnB;AACA,QAAII,YAAY,IAAI,CAApB,EACE,OAAO,OAAP;AACF,QAAIE,QAAQ,GAAGV,MAAM,CAACU,QAAP,CAAgBF,YAAhB,EAA8B,SAA9B,CAAf;AACA,QAAIG,KAAK,GAAGD,QAAQ,CAACC,KAAT,EAAZ;AACA,QAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAT,EAAd;AACA,QAAIC,OAAO,GAAGH,QAAQ,CAACG,OAAT,EAAd;AAEA,QAAIC,aAAa,GAAG,EAApB;AAEAA,IAAAA,aAAa,IAAIH,KAAK,GAAG,KAAKA,KAAL,GAAa,GAAhB,GAAsB,EAA5C;AACAG,IAAAA,aAAa,IAAIF,OAAO,GAAG,CAACA,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAtB,IAA4BA,OAA5B,GAAsC,GAAzC,GAA+C,KAAvE;AACAE,IAAAA,aAAa,IAAID,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAhD;AAEA,WAAOC,aAAP;AACD;;AAGD,sBACE;AAAK,IAAA,EAAE,EAAC,OAAR;AAAA,cAAiBP,QAAQ;AAAzB;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CApCM;;GAAMN,K;UAGoBF,gB;;;KAHpBE,K","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSudokuContext } from '../context/SudokuContext';\nimport moment from 'moment';\n\n// Timer of game time\nexport const Timer = () => {\n  \n  let [time, setTime] = useState(moment());\n  let { timeGameStarted, won } = useSudokuContext();\n\n  // Increase timer every second\n  useEffect(() => {\n    if (!won) { setTimeout(() => setTime(moment()), 1000) };\n  });\n\n\n  \n  function getTimer() {\n\n    let secondsTotal = time.diff(timeGameStarted, 'seconds');\n    if (secondsTotal <= 0)\n      return '00:00';\n    let duration = moment.duration(secondsTotal, 'seconds');\n    let hours = duration.hours();\n    let minutes = duration.minutes();\n    let seconds = duration.seconds();\n\n    let readable_time = '';\n\n    readable_time += hours ? '' + hours + ':' : '';\n    readable_time += minutes ? (minutes < 10 ? '0' : '') + minutes + ':' : '00:';\n    readable_time += seconds < 10 ? '0' + seconds : seconds;\n\n    return readable_time;\n  }\n\n\n  return (\n    <div id=\"timer\">{getTimer()}</div>\n  )\n\n}\n"]},"metadata":{},"sourceType":"module"}