{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/* eslint-disable import/no-unresolved */\nimport axios from 'axios';\nimport handleError from './ErrorHandler.js'; // eslint-disable-next-line consistent-return\n\nfunction getJSON(_x, _x2, _x3) {\n  return _getJSON.apply(this, arguments);\n}\n\nfunction _getJSON() {\n  _getJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, url, // eslint-disable-next-line no-unused-vars\n  callback) {\n    var options, cachedResult, response, responseData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = {\n              baseURL: \"\".concat(values.protocol).concat(values.hostName, \"/\"),\n              timeout: values.timeout\n            };\n            _context.prev = 1;\n            // Retrieve possible content from memory-cache\n            cachedResult = values.cache.get(url);\n\n            if (!cachedResult) {\n              _context.next = 6;\n              break;\n            }\n\n            if (callback) {\n              // Call callback without errors\n              callback(cachedResult);\n            }\n\n            return _context.abrupt(\"return\", cachedResult);\n\n          case 6:\n            _context.next = 8;\n            return axios.get(url, options);\n\n          case 8:\n            response = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 13;\n              break;\n            }\n\n            handleError(response, callback);\n            _context.next = 20;\n            break;\n\n          case 13:\n            // If everything was good\n            // cache the object in memory-cache\n            // only if cacheLimit > 0\n            responseData = response.data;\n\n            if (values.cacheLimit > 0) {\n              values.cache.set(url, responseData, values.cacheLimit);\n            } // If a callback is present\n\n\n            if (!callback) {\n              _context.next = 19;\n              break;\n            }\n\n            // Call it, without errors\n            callback(responseData);\n            _context.next = 20;\n            break;\n\n          case 19:\n            return _context.abrupt(\"return\", responseData);\n\n          case 20:\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](1);\n            handleError(_context.t0, callback);\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 22]]);\n  }));\n  return _getJSON.apply(this, arguments);\n}\n\nexport default getJSON;","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/node_modules/pokedex-promise-v2/dist/src/utils/Getter.js"],"names":["axios","handleError","getJSON","values","url","callback","options","baseURL","protocol","hostName","timeout","cachedResult","cache","get","response","status","responseData","data","cacheLimit","set"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CACA;;SACeC,O;;;;;sEAAf,iBAAuBC,MAAvB,EAA+BC,GAA/B,EACA;AACAC,EAAAA,QAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,YAAAA,OAHV,GAGoB;AACZC,cAAAA,OAAO,YAAKJ,MAAM,CAACK,QAAZ,SAAuBL,MAAM,CAACM,QAA9B,MADK;AAEZC,cAAAA,OAAO,EAAEP,MAAM,CAACO;AAFJ,aAHpB;AAAA;AAQQ;AACMC,YAAAA,YATd,GAS6BR,MAAM,CAACS,KAAP,CAAaC,GAAb,CAAiBT,GAAjB,CAT7B;;AAAA,iBAUYO,YAVZ;AAAA;AAAA;AAAA;;AAWY,gBAAIN,QAAJ,EAAc;AACV;AACAA,cAAAA,QAAQ,CAACM,YAAD,CAAR;AACH;;AAdb,6CAemBA,YAfnB;;AAAA;AAAA;AAAA,mBAiB+BX,KAAK,CAACa,GAAN,CAAUT,GAAV,EAAeE,OAAf,CAjB/B;;AAAA;AAiBcQ,YAAAA,QAjBd;;AAAA,kBAmBYA,QAAQ,CAACC,MAAT,KAAoB,GAnBhC;AAAA;AAAA;AAAA;;AAoBYd,YAAAA,WAAW,CAACa,QAAD,EAAWT,QAAX,CAAX;AApBZ;AAAA;;AAAA;AAuBY;AACA;AACA;AACMW,YAAAA,YA1BlB,GA0BiCF,QAAQ,CAACG,IA1B1C;;AA2BY,gBAAId,MAAM,CAACe,UAAP,GAAoB,CAAxB,EAA2B;AACvBf,cAAAA,MAAM,CAACS,KAAP,CAAaO,GAAb,CAAiBf,GAAjB,EAAsBY,YAAtB,EAAoCb,MAAM,CAACe,UAA3C;AACH,aA7Bb,CA8BY;;;AA9BZ,iBA+BgBb,QA/BhB;AAAA;AAAA;AAAA;;AAgCgB;AACAA,YAAAA,QAAQ,CAACW,YAAD,CAAR;AAjChB;AAAA;;AAAA;AAAA,6CAoCuBA,YApCvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyCQf,YAAAA,WAAW,cAAQI,QAAR,CAAX;;AAzCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4CA,eAAeH,OAAf","sourcesContent":["/* eslint-disable import/no-unresolved */\nimport axios from 'axios';\nimport handleError from './ErrorHandler.js';\n// eslint-disable-next-line consistent-return\nasync function getJSON(values, url, \n// eslint-disable-next-line no-unused-vars\ncallback) {\n    const options = {\n        baseURL: `${values.protocol}${values.hostName}/`,\n        timeout: values.timeout,\n    };\n    try {\n        // Retrieve possible content from memory-cache\n        const cachedResult = values.cache.get(url);\n        if (cachedResult) {\n            if (callback) {\n                // Call callback without errors\n                callback(cachedResult);\n            }\n            return cachedResult;\n        }\n        const response = await axios.get(url, options);\n        // if there is an error\n        if (response.status !== 200) {\n            handleError(response, callback);\n        }\n        else {\n            // If everything was good\n            // cache the object in memory-cache\n            // only if cacheLimit > 0\n            const responseData = response.data;\n            if (values.cacheLimit > 0) {\n                values.cache.set(url, responseData, values.cacheLimit);\n            }\n            // If a callback is present\n            if (callback) {\n                // Call it, without errors\n                callback(responseData);\n            }\n            else {\n                return responseData;\n            }\n        }\n    }\n    catch (error) {\n        handleError(error, callback);\n    }\n}\nexport default getJSON;\n"]},"metadata":{},"sourceType":"module"}