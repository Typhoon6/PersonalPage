{"ast":null,"code":"/**\n  * 此文件从“sudoku.js”和\n  * 从中生成一个独特的数独位置。\n  *\n  * 最初，我尝试了由“sudoku.js”生成的数独。 但\n  *它没有正确处理困难。 一个“简单”的数独是\n  * 没那么容易，而且有时会很困难！ 并且，填充\n  * 不均匀。 有时，整行/列/框都被填满了！\n  *\n  * 'sudoku.js' 代码保持不变，除了最小的\n  * 将其导入此处所需的更改。\n  *\n  * robatron 的 'sudoku.js' javascript 库位于\n  * https://github.com/robatron/sudoku.js 。 所有学分\n  * robatron 让您无需忙于创建有效的数独游戏！\n  *\n  * 我在这个模块中的代码建立在他的代码之上！ 这不会\n  * 在没有像他这样的人分享的情况下成为可能\n  * 开源社区！\n */\nimport { getSudoku } from './sudoku.js';\n/**\n * The Sudoku position is 9x9.\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n *\n * It can be considered to be comprised of 9 boxes\n * each, stacked in a 3x3 formation.\n * Like this: Box1 Box2 Box3\n *            Box4 Box5 Box6\n *            Box7 Box8 Box9\n *\n * In turn, each box is comprised of 9 cells stacked\n * in a 3x3 formation as above. This gives us the below\n * representation:\n *      Box1        Box2        Box3\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n *      Box4        Box5        Box6\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n *      Box7        Box8        Box9\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n *\n * For example, Box1 has the following cells:\n * Box1: A1 A2 A3\n *       B1 B2 B3\n *       C1 C2 C3\n *\n * So in Box1,\n *    Cell1: A1   Cell2: A2   Cell3: A3\n *    Cell4: B1   Cell5: B2   Cell6: B3\n *    Cell7: C1   Cell8: C2   Cell9: C3\n *\n * and in Box8,\n *    Cell1: G4   Cell2: G5   Cell3: G6\n *    Cell4: H4   Cell5: H5   Cell6: H6\n *    Cell7: I4   Cell8: I5   Cell9: I6\n *\n * and so on...\n */\n\n/**\n * Initializes a null array for easier resets in the code.\n */\n\nlet nullArray = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n/**\n * Gets the coordinates of the center cell of the specified box.\n */\n\nfunction _getBoxCenter(box) {\n  // eslint-disable-next-line\n  switch (box) {\n    case 0:\n      return [1, 1];\n\n    case 1:\n      return [1, 4];\n\n    case 2:\n      return [1, 7];\n\n    case 3:\n      return [4, 1];\n\n    case 4:\n      return [4, 4];\n\n    case 5:\n      return [4, 7];\n\n    case 6:\n      return [7, 1];\n\n    case 7:\n      return [7, 4];\n\n    default:\n      return [7, 7];\n  }\n}\n/**\n * Gets the index of cell given:\n * 1. Box\n * 2. Cell\n */\n\n\nfunction _getIndexOfCell(box, cell) {\n  let [row, column] = _getBoxCenter(box); // eslint-disable-next-line\n\n\n  switch (cell) {\n    case 0:\n      {\n        row--;\n        column--;\n        break;\n      }\n\n    case 1:\n      {\n        row--;\n        break;\n      }\n\n    case 2:\n      {\n        row--;\n        column++;\n        break;\n      }\n\n    case 3:\n      {\n        column--;\n        break;\n      }\n\n    case 4:\n      {\n        break;\n      }\n\n    case 5:\n      {\n        column++;\n        break;\n      }\n\n    case 6:\n      {\n        row++;\n        column--;\n        break;\n      }\n\n    case 7:\n      {\n        row++;\n        break;\n      }\n\n    case 8:\n      {\n        row++;\n        column++;\n        break;\n      }\n  }\n\n  return row * 9 + column;\n}\n/**\n * Checks if Cell is available or not (i.e., filled).\n */\n\n\nfunction _cellAvailable(tempInitArray, box, value) {\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n}\n/**\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\n */\n\n\nfunction _generateUniqueSudoku(solvedArray, difficulty, e) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n  if (e) currentDifficulty = e.target.value;\n\n  if (currentDifficulty === 'Easy') {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  } else if (currentDifficulty === 'Medium') {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  } else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] = _cellAvailable(tempInitArray, j, 0) + _cellAvailable(tempInitArray, j, 1) + _cellAvailable(tempInitArray, j, 2) + _cellAvailable(tempInitArray, j, 3) + _cellAvailable(tempInitArray, j, 4) + _cellAvailable(tempInitArray, j, 5) + _cellAvailable(tempInitArray, j, 6) + _cellAvailable(tempInitArray, j, 7) + _cellAvailable(tempInitArray, j, 8);\n  }\n\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n    cellsAvailable = [];\n\n    for (let j = 0; j < 9; j++) {\n      if (tempInitArray[_getIndexOfCell(box, j)] === '0') {\n        cellsAvailable.push(j);\n      }\n    }\n\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n\n    let index = _getIndexOfCell(box, cell);\n\n    tempInitArray[index] = solvedArray[index];\n    boxCounts[box]++;\n  }\n\n  return tempInitArray;\n}\n\nexport const getUniqueSudoku = (difficulty, e) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n  /**\n   * Get Sudoku from sudoku.js\n   */\n\n  let str = sudoku.generate(60);\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === '.' ? '0' : value;\n  });\n  /**\n   * Get the solution from sudoku.js\n   */\n\n  console.log(str);\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n  console.log(str);\n  /**\n   * Pass the generated solution and get a unique Sudoku from it!\n   */\n\n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\n  return [temporaryInitArray, temporarySolvedArray];\n};","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/solver/UniqueSudoku.js"],"names":["getSudoku","nullArray","_getBoxCenter","box","_getIndexOfCell","cell","row","column","_cellAvailable","tempInitArray","value","_generateUniqueSudoku","solvedArray","difficulty","e","currentDifficulty","minimumCells","maximumCells","totalCells","slice","boxCounts","boxesAvailable","cellsAvailable","target","j","i","push","Math","random","length","index","getUniqueSudoku","temporaryInitArray","temporarySolvedArray","sudoku","str","generate","forEach","console","log","solve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,SAASA,SAAT,QAA0B,aAA1B;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;;AACC,IAAIC,SAAS,GAAG,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EACE,GADF,EACO,GADP,EACY,GADZ,EACiB,GADjB,EACsB,GADtB,EAC2B,GAD3B,EACgC,GADhC,EACqC,GADrC,EAC0C,GAD1C,EAEE,GAFF,EAEO,GAFP,EAEY,GAFZ,EAEiB,GAFjB,EAEsB,GAFtB,EAE2B,GAF3B,EAEgC,GAFhC,EAEqC,GAFrC,EAE0C,GAF1C,EAGE,GAHF,EAGO,GAHP,EAGY,GAHZ,EAGiB,GAHjB,EAGsB,GAHtB,EAG2B,GAH3B,EAGgC,GAHhC,EAGqC,GAHrC,EAG0C,GAH1C,EAIE,GAJF,EAIO,GAJP,EAIY,GAJZ,EAIiB,GAJjB,EAIsB,GAJtB,EAI2B,GAJ3B,EAIgC,GAJhC,EAIqC,GAJrC,EAI0C,GAJ1C,EAKE,GALF,EAKO,GALP,EAKY,GALZ,EAKiB,GALjB,EAKsB,GALtB,EAK2B,GAL3B,EAKgC,GALhC,EAKqC,GALrC,EAK0C,GAL1C,EAME,GANF,EAMO,GANP,EAMY,GANZ,EAMiB,GANjB,EAMsB,GANtB,EAM2B,GAN3B,EAMgC,GANhC,EAMqC,GANrC,EAM0C,GAN1C,EAOE,GAPF,EAOO,GAPP,EAOY,GAPZ,EAOiB,GAPjB,EAOsB,GAPtB,EAO2B,GAP3B,EAOgC,GAPhC,EAOqC,GAPrC,EAO0C,GAP1C,EAQE,GARF,EAQO,GARP,EAQY,GARZ,EAQiB,GARjB,EAQsB,GARtB,EAQ2B,GAR3B,EAQgC,GARhC,EAQqC,GARrC,EAQ0C,GAR1C,CAAhB;AAUA;AACD;AACA;;AACC,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B;AACA,UAAOA,GAAP;AACE,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR,SAAK,CAAL;AAAQ,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;;AACR;AAAS,aAAO,CAAC,CAAD,EAAG,CAAH,CAAP;AATX;AAWD;AAED;AACD;AACA;AACA;AACA;;;AACC,SAASC,eAAT,CAAyBD,GAAzB,EAA8BE,IAA9B,EAAoC;AAClC,MAAI,CAACC,GAAD,EAAMC,MAAN,IAAgBL,aAAa,CAACC,GAAD,CAAjC,CADkC,CAElC;;;AACA,UAAOE,IAAP;AACE,SAAK,CAAL;AAAQ;AAACC,QAAAA,GAAG;AAAIC,QAAAA,MAAM;AAAI;AAAO;;AACjC,SAAK,CAAL;AAAQ;AAACD,QAAAA,GAAG;AAAI;AAAO;;AACvB,SAAK,CAAL;AAAQ;AAACA,QAAAA,GAAG;AAAIC,QAAAA,MAAM;AAAI;AAAO;;AACjC,SAAK,CAAL;AAAQ;AAACA,QAAAA,MAAM;AAAI;AAAO;;AAC1B,SAAK,CAAL;AAAQ;AAAC;AAAO;;AAChB,SAAK,CAAL;AAAQ;AAACA,QAAAA,MAAM;AAAI;AAAO;;AAC1B,SAAK,CAAL;AAAQ;AAACD,QAAAA,GAAG;AAAIC,QAAAA,MAAM;AAAI;AAAO;;AACjC,SAAK,CAAL;AAAQ;AAACD,QAAAA,GAAG;AAAI;AAAO;;AACvB,SAAK,CAAL;AAAQ;AAACA,QAAAA,GAAG;AAAIC,QAAAA,MAAM;AAAI;AAAO;AATnC;;AAWA,SAAOD,GAAG,GAAG,CAAN,GAAUC,MAAjB;AACD;AAED;AACD;AACA;;;AACC,SAASC,cAAT,CAAwBC,aAAxB,EAAuCN,GAAvC,EAA4CO,KAA5C,EAAmD;AACjD,SAAOD,aAAa,CAACL,eAAe,CAACD,GAAD,EAAMO,KAAN,CAAhB,CAAb,KAA+C,GAA/C,GAAqD,CAArD,GAAyD,CAAhE;AACD;AAED;AACD;AACA;;;AACC,SAASC,qBAAT,CAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,CAAxD,EAA2D;AACzD,MAAIC,iBAAiB,GAAGF,UAAxB;AACA,MAAIG,YAAJ,EAAkBC,YAAlB,EAAgCC,UAAhC,EAA4Cf,GAA5C,EAAiDE,IAAjD;AAEA,MAAII,aAAa,GAAGR,SAAS,CAACkB,KAAV,EAApB;AACA,MAAIC,SAAS,GAAG,CAAE,CAAF,EAAI,CAAJ,EAAM,CAAN,EACE,CADF,EACI,CADJ,EACM,CADN,EAEE,CAFF,EAEI,CAFJ,EAEM,CAFN,CAAhB;AAGA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,cAAc,GAAG,EAArB;AAEA,MAAIR,CAAJ,EACEC,iBAAiB,GAAGD,CAAC,CAACS,MAAF,CAASb,KAA7B;;AAEF,MAAIK,iBAAiB,KAAK,MAA1B,EAAkC;AAChCC,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,UAAU,GAAG,EAAb;AACD,GAJD,MAKK,IAAIH,iBAAiB,KAAK,QAA1B,EAAoC;AACvCC,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,UAAU,GAAG,EAAb;AACD,GAJI,MAKA;AACHF,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,YAAY,GAAG,CAAf;AACAC,IAAAA,UAAU,GAAG,EAAb;AACD;;AAED,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BJ,IAAAA,SAAS,CAACI,CAAD,CAAT,GAAgBhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAAd,GACAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CADd,GAEAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAFd,GAGAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAHd,GAIAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAJd,GAKAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CALd,GAMAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CANd,GAOAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAPd,GAQAhB,cAAc,CAACC,aAAD,EAAgBe,CAAhB,EAAmB,CAAnB,CAR9B;AASD;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgCO,CAAC,EAAjC,EAAqC;AACnCJ,IAAAA,cAAc,GAAG,EAAjB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIJ,SAAS,CAACI,CAAD,CAAT,GAAeR,YAAnB,EAAiC;AAC/BK,QAAAA,cAAc,CAACK,IAAf,CAAoBF,CAApB;AACD;AACF;;AACD,QAAIH,cAAJ,EAAoB;AAClB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIJ,SAAS,CAACI,CAAD,CAAT,GAAeP,YAAnB,EAAiC;AAC/BI,UAAAA,cAAc,CAACK,IAAf,CAAoBF,CAApB;AACD;AACF;AACF;;AACDrB,IAAAA,GAAG,GAAGkB,cAAc,CAACM,IAAI,CAACC,MAAL,KAAgBP,cAAc,CAACQ,MAA/B,GAAwC,CAAzC,CAApB;AAEAP,IAAAA,cAAc,GAAG,EAAjB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAKf,aAAa,CAACL,eAAe,CAACD,GAAD,EAAMqB,CAAN,CAAhB,CAAb,KAA2C,GAAhD,EAAqD;AACnDF,QAAAA,cAAc,CAACI,IAAf,CAAoBF,CAApB;AACD;AACF;;AACDnB,IAAAA,IAAI,GAAGiB,cAAc,CAACK,IAAI,CAACC,MAAL,KAAgBN,cAAc,CAACO,MAA/B,GAAwC,CAAzC,CAArB;;AAEA,QAAIC,KAAK,GAAG1B,eAAe,CAACD,GAAD,EAAME,IAAN,CAA3B;;AACAI,IAAAA,aAAa,CAACqB,KAAD,CAAb,GAAuBlB,WAAW,CAACkB,KAAD,CAAlC;AACAV,IAAAA,SAAS,CAACjB,GAAD,CAAT;AACD;;AAED,SAAOM,aAAP;AACD;;AAED,OAAO,MAAMsB,eAAe,GAAG,CAAClB,UAAD,EAAaC,CAAb,KAAmB;AAChD,MAAIkB,kBAAkB,GAAG/B,SAAS,CAACkB,KAAV,EAAzB;AACA,MAAIc,oBAAoB,GAAGhC,SAAS,CAACkB,KAAV,EAA3B;AACA,MAAIe,MAAM,GAAGlC,SAAS,EAAtB;AAEA;AACH;AACA;;AACG,MAAImC,GAAG,GAAGD,MAAM,CAACE,QAAP,CAAgB,EAAhB,CAAV;AAEA,GAAC,GAAGD,GAAJ,EAASE,OAAT,CAAiB,CAAC3B,KAAD,EAAQoB,KAAR,KAAkB;AACjCE,IAAAA,kBAAkB,CAACF,KAAD,CAAlB,GAA4BpB,KAAK,KAAK,GAAV,GACN,GADM,GAENA,KAFtB;AAGD,GAJD;AAMA;AACH;AACA;;AAEG4B,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEAA,EAAAA,GAAG,GAAGD,MAAM,CAACM,KAAP,CAAaL,GAAb,CAAN;AACA,GAAC,GAAGA,GAAJ,EAASE,OAAT,CAAiB,CAAC3B,KAAD,EAAQoB,KAAR,KAAkB;AACjCG,IAAAA,oBAAoB,CAACH,KAAD,CAApB,GAA8BpB,KAA9B;AACD,GAFD;AAIA4B,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEA;AACH;AACA;;AACGH,EAAAA,kBAAkB,GAAGrB,qBAAqB,CAACsB,oBAAD,EAAuBpB,UAAvB,EAAmCC,CAAnC,CAA1C;AAEA,SAAO,CAACkB,kBAAD,EAAqBC,oBAArB,CAAP;AACD,CAnCM","sourcesContent":["/**\n  * 此文件从“sudoku.js”和\n  * 从中生成一个独特的数独位置。\n  *\n  * 最初，我尝试了由“sudoku.js”生成的数独。 但\n  *它没有正确处理困难。 一个“简单”的数独是\n  * 没那么容易，而且有时会很困难！ 并且，填充\n  * 不均匀。 有时，整行/列/框都被填满了！\n  *\n  * 'sudoku.js' 代码保持不变，除了最小的\n  * 将其导入此处所需的更改。\n  *\n  * robatron 的 'sudoku.js' javascript 库位于\n  * https://github.com/robatron/sudoku.js 。 所有学分\n  * robatron 让您无需忙于创建有效的数独游戏！\n  *\n  * 我在这个模块中的代码建立在他的代码之上！ 这不会\n  * 在没有像他这样的人分享的情况下成为可能\n  * 开源社区！\n */\n import { getSudoku } from './sudoku.js';\n\n /**\n  * The Sudoku position is 9x9.\n  *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n  *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n  *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n  *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n  *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n  *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n  *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n  *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n  *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n  *\n  * It can be considered to be comprised of 9 boxes\n  * each, stacked in a 3x3 formation.\n  * Like this: Box1 Box2 Box3\n  *            Box4 Box5 Box6\n  *            Box7 Box8 Box9\n  *\n  * In turn, each box is comprised of 9 cells stacked\n  * in a 3x3 formation as above. This gives us the below\n  * representation:\n  *      Box1        Box2        Box3\n  *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n  *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n  *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n  *      Box4        Box5        Box6\n  *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n  *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n  *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n  *      Box7        Box8        Box9\n  *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n  *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n  *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n  *\n  * For example, Box1 has the following cells:\n  * Box1: A1 A2 A3\n  *       B1 B2 B3\n  *       C1 C2 C3\n  *\n  * So in Box1,\n  *    Cell1: A1   Cell2: A2   Cell3: A3\n  *    Cell4: B1   Cell5: B2   Cell6: B3\n  *    Cell7: C1   Cell8: C2   Cell9: C3\n  *\n  * and in Box8,\n  *    Cell1: G4   Cell2: G5   Cell3: G6\n  *    Cell4: H4   Cell5: H5   Cell6: H6\n  *    Cell7: I4   Cell8: I5   Cell9: I6\n  *\n  * and so on...\n  */\n \n /**\n  * Initializes a null array for easier resets in the code.\n  */\n let nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n \n /**\n  * Gets the coordinates of the center cell of the specified box.\n  */\n function _getBoxCenter(box) {\n   // eslint-disable-next-line\n   switch(box) {\n     case 0: return [1,1];\n     case 1: return [1,4];\n     case 2: return [1,7];\n     case 3: return [4,1];\n     case 4: return [4,4];\n     case 5: return [4,7];\n     case 6: return [7,1];\n     case 7: return [7,4];\n     default: return [7,7];\n   }\n }\n \n /**\n  * Gets the index of cell given:\n  * 1. Box\n  * 2. Cell\n  */\n function _getIndexOfCell(box, cell) {\n   let [row, column] = _getBoxCenter(box);\n   // eslint-disable-next-line\n   switch(cell) {\n     case 0: {row--; column--; break;}\n     case 1: {row--; break;}\n     case 2: {row--; column++; break;}\n     case 3: {column--; break;}\n     case 4: {break;}\n     case 5: {column++; break;}\n     case 6: {row++; column--; break;}\n     case 7: {row++; break;}\n     case 8: {row++; column++; break;}\n   }\n   return row * 9 + column;\n }\n \n /**\n  * Checks if Cell is available or not (i.e., filled).\n  */\n function _cellAvailable(tempInitArray, box, value) {\n   return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n }\n \n /**\n  * Generates a Unique Sudoku puzzle from a solved Sudoku.\n  */\n function _generateUniqueSudoku(solvedArray, difficulty, e) {\n   let currentDifficulty = difficulty;\n   let minimumCells, maximumCells, totalCells, box, cell;\n \n   let tempInitArray = nullArray.slice();\n   let boxCounts = [ 0,0,0,\n                     0,0,0,\n                     0,0,0 ];\n   let boxesAvailable = [];\n   let cellsAvailable = [];\n \n   if (e)\n     currentDifficulty = e.target.value;\n \n   if (currentDifficulty === 'Easy') {\n     minimumCells = 3;\n     maximumCells = 7;\n     totalCells = 45;\n   }\n   else if (currentDifficulty === 'Medium') {\n     minimumCells = 2;\n     maximumCells = 6;\n     totalCells = 40;\n   }\n   else {\n     minimumCells = 1;\n     maximumCells = 5;\n     totalCells = 30;\n   }\n \n   for (let j = 0; j < 9; j++) {\n     boxCounts[j] =  _cellAvailable(tempInitArray, j, 0) +\n                     _cellAvailable(tempInitArray, j, 1) +\n                     _cellAvailable(tempInitArray, j, 2) +\n                     _cellAvailable(tempInitArray, j, 3) +\n                     _cellAvailable(tempInitArray, j, 4) +\n                     _cellAvailable(tempInitArray, j, 5) +\n                     _cellAvailable(tempInitArray, j, 6) +\n                     _cellAvailable(tempInitArray, j, 7) +\n                     _cellAvailable(tempInitArray, j, 8);\n   }\n \n   for (let i = 0; i < totalCells; i++) {\n     boxesAvailable = [];\n     for (let j = 0; j < 9; j++) {\n       if (boxCounts[j] < minimumCells) {\n         boxesAvailable.push(j);\n       }\n     }\n     if (boxesAvailable) {\n       for (let j = 0; j < 9; j++) {\n         if (boxCounts[j] < maximumCells) {\n           boxesAvailable.push(j);\n         }\n       }\n     }\n     box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n \n     cellsAvailable = [];\n     for (let j = 0; j < 9; j++) {\n       if ( tempInitArray[_getIndexOfCell(box, j)] === '0') {\n         cellsAvailable.push(j);\n       }\n     }\n     cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n \n     let index = _getIndexOfCell(box, cell);\n     tempInitArray[index] = solvedArray[index]\n     boxCounts[box]++;\n   }\n \n   return tempInitArray;\n }\n \n export const getUniqueSudoku = (difficulty, e) => {\n   let temporaryInitArray = nullArray.slice();\n   let temporarySolvedArray = nullArray.slice();\n   let sudoku = getSudoku();\n \n   /**\n    * Get Sudoku from sudoku.js\n    */\n   let str = sudoku.generate(60);\n \n   [...str].forEach((value, index) => {\n     temporaryInitArray[index] = value === '.'\n                         ? '0'\n                         : value;\n   });\n \n   /**\n    * Get the solution from sudoku.js\n    */\n\n   console.log(str);\n\n   str = sudoku.solve(str);\n   [...str].forEach((value, index) => {\n     temporarySolvedArray[index] = value;\n   });\n \n   console.log(str);\n\n   /**\n    * Pass the generated solution and get a unique Sudoku from it!\n    */\n   temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\n \n   return [temporaryInitArray, temporarySolvedArray];\n }\n "]},"metadata":{},"sourceType":"module"}