{"ast":null,"code":"import indentString from 'indent-string';\nimport cleanStack from 'clean-stack';\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nexport default class AggregateError extends Error {\n  #errors;\n  name = 'AggregateError';\n\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n    }\n\n    errors = errors.map(error => {\n      if (error instanceof Error) {\n        return error;\n      }\n\n      if (error !== null && typeof error === 'object') {\n        // Handle plain error objects with message property and/or possibly other metadata\n        return Object.assign(new Error(error.message), error);\n      }\n\n      return new Error(error);\n    });\n    let message = errors.map(error => {\n      // The `stack` property is not standardized, so we can't assume it exists\n      return typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n    }).join('\\n');\n    message = '\\n' + indentString(message, 4);\n    super(message);\n    this.#errors = errors;\n  }\n\n  get errors() {\n    return this.#errors.slice();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/node_modules/pokedex-promise-v2/node_modules/aggregate-error/index.js"],"names":["indentString","cleanStack","cleanInternalStack","stack","replace","AggregateError","Error","errors","name","constructor","Array","isArray","TypeError","map","error","Object","assign","message","String","join","slice"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAc,+CAAd,EAA+D,EAA/D,CAApC;;AAEA,eAAe,MAAMC,cAAN,SAA6BC,KAA7B,CAAmC;AACjD,GAACC,MAAD;AAEAC,EAAAA,IAAI,GAAG,gBAAH;;AAEJC,EAAAA,WAAW,CAACF,MAAD,EAAS;AACnB,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAL,EAA4B;AAC3B,YAAM,IAAIK,SAAJ,CAAe,sCAAqC,OAAOL,MAAO,EAAlE,CAAN;AACA;;AAEDA,IAAAA,MAAM,GAAGA,MAAM,CAACM,GAAP,CAAWC,KAAK,IAAI;AAC5B,UAAIA,KAAK,YAAYR,KAArB,EAA4B;AAC3B,eAAOQ,KAAP;AACA;;AAED,UAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;AAChD;AACA,eAAOC,MAAM,CAACC,MAAP,CAAc,IAAIV,KAAJ,CAAUQ,KAAK,CAACG,OAAhB,CAAd,EAAwCH,KAAxC,CAAP;AACA;;AAED,aAAO,IAAIR,KAAJ,CAAUQ,KAAV,CAAP;AACA,KAXQ,CAAT;AAaA,QAAIG,OAAO,GAAGV,MAAM,CAClBM,GADY,CACRC,KAAK,IAAI;AACb;AACA,aAAO,OAAOA,KAAK,CAACX,KAAb,KAAuB,QAAvB,GAAkCD,kBAAkB,CAACD,UAAU,CAACa,KAAK,CAACX,KAAP,CAAX,CAApD,GAAgFe,MAAM,CAACJ,KAAD,CAA7F;AACA,KAJY,EAKZK,IALY,CAKP,IALO,CAAd;AAMAF,IAAAA,OAAO,GAAG,OAAOjB,YAAY,CAACiB,OAAD,EAAU,CAAV,CAA7B;AACA,UAAMA,OAAN;AAEA,SAAK,CAACV,MAAN,GAAeA,MAAf;AACA;;AAES,MAANA,MAAM,GAAG;AACZ,WAAO,KAAK,CAACA,MAAN,CAAaa,KAAb,EAAP;AACA;;AArCgD","sourcesContent":["import indentString from 'indent-string';\nimport cleanStack from 'clean-stack';\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nexport default class AggregateError extends Error {\n\t#errors;\n\n\tname = 'AggregateError';\n\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = errors.map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.#errors = errors;\n\t}\n\n\tget errors() {\n\t\treturn this.#errors.slice();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}