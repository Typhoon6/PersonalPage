{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\src\\\\pages\\\\Sudoku\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext'; // The Sudoku Board + Gameplay\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Game() {\n  _s();\n\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    initArray,\n    setInitArray,\n    cellSelected,\n    setCellSelected,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    setWon\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState(false);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false); // New Game + Initialise Variables\n\n  function createNewGame(e) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  } // Let the User put in a board and solve it\n\n\n  function solve_sudoku() {} // Boolean to check if user has completed the Game\n\n\n  function won_game(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n      if (cellIndex === index) {\n        return value === solvedArray[cellIndex];\n      } else {\n        return cell === solvedArray[cellIndex];\n      }\n    })) {\n      return true;\n    }\n\n    return false;\n  } // Assign the cell (index) a value\n\n\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (won_game(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  } // User sets the cell value with cell_value function\n\n\n  function user_cell_value(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n    } else {\n      cell_value(index, value);\n    }\n  } // ======================================================================\n  // ======================== RIGHT SIDE FUNCTIONS ========================\n  // ======================================================================\n  // Clicking the Cell\n\n\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      user_cell_value(indexOfArray, numberSelected);\n    }\n\n    setCellSelected(indexOfArray);\n  } // Change difficulty makes a new game with varying num tiles (less tiles = harder)\n\n\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  } // Selected number is the one the cell will change to\n\n\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      user_cell_value(cellSelected, number);\n    }\n  } // Goes back 1 move (using history)\n\n\n  function undo_move() {\n    if (history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined) setGameArray(arr);\n    }\n  } // Clear cell: only a typed in cell can be erased\n\n\n  function clear_cell() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  } // Hint: the selected cell will just fill the cell to be the correct number\n\n\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  } // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n\n\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  } // Fast mode: click on tile will change it to be last selected number\n\n\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  } // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // New game starts\n\n\n  function start_new_game() {\n    createNewGame();\n    close_new_game_modal();\n  } // Won game opens a modal, clicking it will remove\n\n\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  } // Modal Pop Up for starting a new game\n\n\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  } // Complete Sudoku Board\n\n\n  function complete_board() {\n    let tempHistory = history.slice();\n    tempHistory.push(gameArray.slice());\n    setHistory(tempHistory);\n    setGameArray(solvedArray);\n  } // Start a New Game\n\n\n  useEffect(() => {\n    // On key press (shortcuts)\n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function (e) {\n      if (e.target !== document.getElementsByClassName('sudoku_game')[0] && !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      }\n    });\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"container blur\" : \"container \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innercontainer center_div\",\n        children: [/*#__PURE__*/_jsxDEV(GameSection, {\n          onClick: indexOfArray => onClickCell(indexOfArray)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatusSection, {\n          onClickNumber: number => onClickNumber(number),\n          onChange: e => onChangeDifficulty(e),\n          undo_move: undo_move,\n          clear_cell: clear_cell,\n          cell_hint: cell_hint,\n          change_mistakes_mode: change_mistakes_mode,\n          change_fast_mode: change_fast_mode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new_game_btn\",\n      onClick: open_new_game_modal,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new_game_btn\",\n      onClick: complete_board,\n      children: \"Complete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new_game_btn\",\n      onClick: solve_sudoku,\n      children: \"Solve Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_game_modal\",\n      id: \"new_game_modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ngm_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nbm_text\",\n          children: \"Do you wish to start a new game?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: start_new_game,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: close_new_game_modal,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngm_close\",\n          onClick: close_new_game_modal,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"overlay o_block\" : \"overlay\",\n      onClick: onClickOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"gameover_text\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"You \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameover_col_1\",\n          children: \"Solved \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gameover_col_2\",\n          children: \"IT! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"WbchbVeU3dZzqf+vd6G3/DO72N4=\", false, function () {\n  return [useSudokuContext];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/Game.js"],"names":["React","useState","useEffect","moment","GameSection","StatusSection","getUniqueSudoku","useSudokuContext","Game","numberSelected","setNumberSelected","gameArray","setGameArray","initArray","setInitArray","cellSelected","setCellSelected","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","setWon","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","createNewGame","e","temporaryInitArray","temporarySolvedArray","solve_sudoku","won_game","index","value","every","cell","cellIndex","cell_value","tempArray","slice","tempHistory","push","user_cell_value","onClickCell","indexOfArray","onChangeDifficulty","target","onClickNumber","number","undo_move","length","hist","arr","pop","undefined","clear_cell","cell_hint","change_mistakes_mode","change_fast_mode","start_new_game","close_new_game_modal","onClickOverlay","document","getElementById","style","visibility","open_new_game_modal","complete_board","window","addEventListener","getElementsByClassName","className","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\n\n// The Sudoku Board + Gameplay\nexport function Game (){\n  \n  let { numberSelected, setNumberSelected,\n        gameArray, setGameArray,\n        initArray, setInitArray,\n        cellSelected, setCellSelected,\n        difficulty, setDifficulty,\n        setTimeGameStarted,\n        fastMode, setFastMode,\n        setWon } = useSudokuContext();\n\n  let [ mistakesMode, setMistakesMode ] = useState(false);\n  let [ history, setHistory ] = useState([]);\n  let [ solvedArray, setSolvedArray ] = useState([]);\n  let [ overlay, setOverlay ] = useState(false);\n\n  // New Game + Initialise Variables\n  function createNewGame(e) {\n    let [ temporaryInitArray, temporarySolvedArray ] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  // Let the User put in a board and solve it\n  function solve_sudoku() {\n\n  }\n\n  // Boolean to check if user has completed the Game\n  function won_game(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n        if (cellIndex === index) {\n          return value === solvedArray[cellIndex];\n        } else {\n          return cell === solvedArray[cellIndex];\n        }\n      })) {\n      return true;\n    }\n    return false;\n  }\n\n  // Assign the cell (index) a value\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (won_game(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  // User sets the cell value with cell_value function\n  function user_cell_value(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n    } else {\n      cell_value(index, value);\n    }\n  }\n\n\n  // ======================================================================\n  // ======================== RIGHT SIDE FUNCTIONS ========================\n  // ======================================================================\n\n  // Clicking the Cell\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      user_cell_value(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  // Change difficulty makes a new game with varying num tiles (less tiles = harder)\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  }\n\n  // Selected number is the one the cell will change to\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number)\n    } \n    else if (cellSelected !== -1) {\n      user_cell_value(cellSelected,number);\n    }\n  }\n\n  // Goes back 1 move (using history)\n  function undo_move() {\n    if(history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined)\n        setGameArray(arr);\n    }\n  }\n\n  // Clear cell: only a typed in cell can be erased\n  function clear_cell() {\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  }\n\n  // Hint: the selected cell will just fill the cell to be the correct number\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  // Fast mode: click on tile will change it to be last selected number\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // New game starts\n  function start_new_game() {\n    createNewGame();\n    close_new_game_modal();\n  }\n  // Won game opens a modal, clicking it will remove\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  }\n  // Modal Pop Up for starting a new game\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  }\n  \n  // Complete Sudoku Board\n  function complete_board() {\n    let tempHistory = history.slice();\n    tempHistory.push(gameArray.slice());\n    setHistory(tempHistory);\n    setGameArray(solvedArray);\n  }\n  \n  // Start a New Game\n  useEffect(() => {\n    // On key press (shortcuts)\n\n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function(e){   \n      if(e.target !== document.getElementsByClassName('sudoku_game')[0] &&\n        !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      } \n    });\n    createNewGame();\n  }, []);\n  \n\n  return (\n    <div>\n      <div className={overlay?\"container blur\":\"container \"}  >\n        <div className=\"innercontainer center_div\">\n          <GameSection\n            onClick={(indexOfArray) => onClickCell(indexOfArray)}\n          />\n          <StatusSection\n            onClickNumber={(number) => onClickNumber(number)}\n            onChange={(e) => onChangeDifficulty(e)}\n            undo_move={undo_move}\n            clear_cell={clear_cell}\n            cell_hint={cell_hint}\n            change_mistakes_mode={change_mistakes_mode}\n            change_fast_mode={change_fast_mode}\n          />\n        </div>\n      </div>\n      \n      <button className='new_game_btn' onClick={open_new_game_modal}>New Game</button>\n      <button className='new_game_btn' onClick={complete_board}>Complete</button>\n      <button className='new_game_btn' onClick={solve_sudoku}>Solve Sudoku</button>\n\n      <div className=\"new_game_modal\" id=\"new_game_modal\">\n        <div className=\"ngm_container\">\n          <div className='nbm_text'>Do you wish to start a new game?</div>\n          <button className='ngb' onClick={start_new_game}>Yes</button>\n          <button className='ngb' onClick={close_new_game_modal}>No</button>\n          <button className=\"ngm_close\" onClick={close_new_game_modal}>X</button>\n        </div>\n      </div>\n\n      <div className= { overlay ? \"overlay o_block\" : \"overlay\" } onClick={onClickOverlay} >\n        <h2 className=\"gameover_text\">\n          <span>You </span>\n          <span className=\"gameover_col_1\">Solved </span> \n          <span className=\"gameover_col_2\">IT! </span>\n        </h2>\n      </div>\n</div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}