{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useState,useEffect}from'react';import moment from'moment';import{GameSection}from'./components/GameSection';import{StatusSection}from'./components/StatusSection';import{getUniqueSudoku}from'./solver/UniqueSudoku';import{useSudokuContext}from'./context/SudokuContext';import{getSudoku}from'./solver/sudoku';// The Sudoku Board + Gameplay\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Game(){var _useSudokuContext=useSudokuContext(),numberSelected=_useSudokuContext.numberSelected,setNumberSelected=_useSudokuContext.setNumberSelected,gameArray=_useSudokuContext.gameArray,setGameArray=_useSudokuContext.setGameArray,initArray=_useSudokuContext.initArray,setInitArray=_useSudokuContext.setInitArray,cellSelected=_useSudokuContext.cellSelected,setCellSelected=_useSudokuContext.setCellSelected,difficulty=_useSudokuContext.difficulty,setDifficulty=_useSudokuContext.setDifficulty,setTimeGameStarted=_useSudokuContext.setTimeGameStarted,fastMode=_useSudokuContext.fastMode,setFastMode=_useSudokuContext.setFastMode,setWon=_useSudokuContext.setWon;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),mistakesMode=_useState2[0],setMistakesMode=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),history=_useState4[0],setHistory=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),solvedArray=_useState6[0],setSolvedArray=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),overlay=_useState8[0],setOverlay=_useState8[1];var _useState9=useState(-1),_useState10=_slicedToArray(_useState9,2),tempcell=_useState10[0],setTempCell=_useState10[1];var nullArray=['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'];// New Game + Initialise Variables\nfunction createNewGame(e){var _getUniqueSudoku=getUniqueSudoku(difficulty,e),_getUniqueSudoku2=_slicedToArray(_getUniqueSudoku,2),temporaryInitArray=_getUniqueSudoku2[0],temporarySolvedArray=_getUniqueSudoku2[1];setInitArray(temporaryInitArray);setGameArray(temporaryInitArray);setSolvedArray(temporarySolvedArray);setNumberSelected('0');setTimeGameStarted(moment());setCellSelected(-1);setHistory([]);setWon(false);}// Let the User enter a board of their choosing (no initial blocks)\nfunction user_input_board_mode(){setInitArray(nullArray);setSolvedArray(nullArray);setGameArray(nullArray);}// Solve their sudoku problem\nfunction user_input_solve(){var sudoku=getSudoku();var num_rows=document.getElementsByClassName(\"sudoku_row\");var sudoku_string='';var MIN_NUM=17;var counter=0;for(var i=0;i<num_rows.length;i++){var col=num_rows[i].getElementsByTagName(\"td\");for(var j=0;j<col.length;j++){var num=col[j].innerText;if(num===\"0\"){sudoku_string+='.';}else{sudoku_string+=num;counter++;}}}if(counter<MIN_NUM){alert('Need at least 17 Entries!');}else{setGameArray(sudoku.solve(sudoku_string));}}// Boolean to check if user has completed the Game\nfunction won_game(index,value){if(gameArray.every(function(cell,cellIndex){if(cellIndex===index){return value===solvedArray[cellIndex];}else{return cell===solvedArray[cellIndex];}})){return true;}return false;}// Assign the cell (index) a value\nfunction cell_value(index,value){if(initArray[index]==='0'){var tempArray=gameArray.slice();var tempHistory=history.slice();tempHistory.push(gameArray.slice());setHistory(tempHistory);tempArray[index]=value;setGameArray(tempArray);if(won_game(index,value)){setOverlay(true);setWon(true);}}}// User sets the cell value with cell_value function\nfunction user_cell_value(index,value){if(mistakesMode){if(value===solvedArray[index]){cell_value(index,value);}}else{cell_value(index,value);}}// ======================================================================\n// ======================== RIGHT SIDE FUNCTIONS ========================\n// ======================================================================\n// Clicking the Cell\nfunction onClickCell(indexOfArray){if(fastMode&&numberSelected!=='0'){user_cell_value(indexOfArray,numberSelected);}setCellSelected(indexOfArray);window.addEventListener('keypress',function(e){user_type_number(e,indexOfArray);},{once:true});}// Function to allow the user to manually type the numbers\nfunction user_type_number(event,index){var value=event.key;if(is_valid_input_number(event.key)){user_cell_value(index,value);setCellSelected(-1);}}// Change difficulty makes a new game with varying num tiles (less tiles = harder)\nfunction onChangeDifficulty(e){setDifficulty(e.target.value);createNewGame(e);}// Selected number is the one the cell will change to\nfunction _onClickNumber(number){if(fastMode){setNumberSelected(number);}else if(cellSelected!==-1){user_cell_value(cellSelected,number);}}// Goes back 1 move (using history)\nfunction undo_move(){if(history.length){var hist=history.slice();var arr=hist.pop();setHistory(hist);if(arr!==undefined)setGameArray(arr);}}// Clear cell: only a typed in cell can be erased\nfunction clear_cell(){if(cellSelected!==-1&&gameArray[cellSelected]!=='0'){cell_value(cellSelected,'0');}}// Hint: the selected cell will just fill the cell to be the correct number\nfunction cell_hint(){if(cellSelected!==-1){cell_value(cellSelected,solvedArray[cellSelected]);}}// Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\nfunction change_mistakes_mode(){setMistakesMode(!mistakesMode);}// Annoying bug makes it so changing mode won't update instantly, requires reclick\nfunction clear_number_section(){var numsec=document.getElementById(\"number_section\");var list_op=numsec.getElementsByClassName(\"number_option\");for(var i=0;i<list_op.length;i++){list_op[i].style.backgroundColor=\"rgb(18, 24, 44)\";list_op[i].style.color=\"rgb(178, 204, 229)\";}}// Fast mode: click on tile will change it to be last selected number\nfunction change_fast_mode(){clear_number_section();if(fastMode){setNumberSelected('0');}setCellSelected(-1);setFastMode(!fastMode);}// ======================================================================\n// =========================== GAME MODALS: =============================\n// ======================================================================\n// New game starts\nfunction start_new_game(){createNewGame();close_new_game_modal();}// Won game opens a modal, clicking it will remove\nfunction onClickOverlay(){setOverlay(false);createNewGame();}// Modal Pop Up for starting a new game\nfunction close_new_game_modal(){document.getElementById(\"new_game_modal\").style.visibility=\"hidden\";}function open_new_game_modal(){document.getElementById(\"new_game_modal\").style.visibility=\"visible\";}// Complete Sudoku Board\nfunction complete_board(){var tempHistory=history.slice();tempHistory.push(gameArray.slice());setHistory(tempHistory);setGameArray(solvedArray);}// Change the mode between sudoku game and solver modes\nfunction change_sudoku_mode(){var mode=document.getElementById(\"sudoku_mode_options\").value;console.log(mode);if(mode===\"sudoku_solver_option\"){start_new_game();user_input_board_mode();document.getElementById(\"sudoku_game_op_btns\").style.display=\"none\";document.getElementById(\"sudoku_solver_op_btns\").style.display=\"block\";}else{start_new_game();document.getElementById(\"sudoku_game_op_btns\").style.display=\"block\";document.getElementById(\"sudoku_solver_op_btns\").style.display=\"none\";}}function is_valid_input_number(key){if(key==='1'||key==='2'||key==='3'||key==='4'||key==='5'||key==='6'||key==='7'||key==='8'||key==='9'||key==='0'){return true;}else{return false;}}// Start a New Game\nuseEffect(function(){// Have so if you click off the board then it removes selection\nwindow.addEventListener('click',function(e){if(e.target!==document.getElementsByClassName('sudoku_game')[0]&&!e.target.className.includes(\"cell\")){setCellSelected(-1);}});createNewGame();},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"select\",{id:\"sudoku_mode_options\",name:\"sudoku_mode_options\",defaultValue:\"Sudoku Game\",onChange:change_sudoku_mode,children:[/*#__PURE__*/_jsx(\"option\",{value:\"sudoku_game_option\",children:\"Sudoku Game\"}),/*#__PURE__*/_jsx(\"option\",{value:\"sudoku_solver_option\",children:\"Sudoku Solver\"})]}),/*#__PURE__*/_jsx(\"div\",{className:overlay?\"container blur\":\"container \",children:/*#__PURE__*/_jsxs(\"div\",{className:\"innercontainer center_div\",children:[/*#__PURE__*/_jsx(GameSection,{onClick:function onClick(indexOfArray){return onClickCell(indexOfArray);}}),/*#__PURE__*/_jsx(StatusSection,{onClickNumber:function onClickNumber(number){return _onClickNumber(number);},onChange:function onChange(e){return onChangeDifficulty(e);},undo_move:undo_move,clear_cell:clear_cell,cell_hint:cell_hint,change_mistakes_mode:change_mistakes_mode,change_fast_mode:change_fast_mode})]})}),/*#__PURE__*/_jsxs(\"span\",{id:\"sudoku_game_op_btns\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"new_game_btn\",onClick:open_new_game_modal,children:\"New Game\"}),/*#__PURE__*/_jsx(\"button\",{className:\"new_game_btn\",onClick:complete_board,children:\"Complete\"})]}),/*#__PURE__*/_jsxs(\"span\",{id:\"sudoku_solver_op_btns\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"new_game_btn\",onClick:user_input_board_mode,children:\"Start Over\"}),/*#__PURE__*/_jsx(\"button\",{className:\"new_game_btn\",onClick:user_input_solve,children:\"Solve\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"new_game_modal\",id:\"new_game_modal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"ngm_container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"nbm_text\",children:\"Do you wish to start a new game?\"}),/*#__PURE__*/_jsx(\"button\",{className:\"ngb\",onClick:start_new_game,children:\"Yes\"}),/*#__PURE__*/_jsx(\"button\",{className:\"ngb\",onClick:close_new_game_modal,children:\"No\"}),/*#__PURE__*/_jsx(\"button\",{className:\"ngm_close\",onClick:close_new_game_modal,children:\"X\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:overlay?\"overlay o_block\":\"overlay\",onClick:onClickOverlay,children:/*#__PURE__*/_jsxs(\"h2\",{className:\"gameover_text\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"gameover_col_2\",children:\"You \"}),/*#__PURE__*/_jsx(\"span\",{className:\"gameover_col_1\",children:\"Solved \"}),/*#__PURE__*/_jsx(\"span\",{className:\"gameover_col_2\",children:\"IT! \"})]})})]});}","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/Game.js"],"names":["React","useState","useEffect","moment","GameSection","StatusSection","getUniqueSudoku","useSudokuContext","getSudoku","Game","numberSelected","setNumberSelected","gameArray","setGameArray","initArray","setInitArray","cellSelected","setCellSelected","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","setWon","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","tempcell","setTempCell","nullArray","createNewGame","e","temporaryInitArray","temporarySolvedArray","user_input_board_mode","user_input_solve","sudoku","num_rows","document","getElementsByClassName","sudoku_string","MIN_NUM","counter","i","length","col","getElementsByTagName","j","num","innerText","alert","solve","won_game","index","value","every","cell","cellIndex","cell_value","tempArray","slice","tempHistory","push","user_cell_value","onClickCell","indexOfArray","window","addEventListener","user_type_number","once","event","key","is_valid_input_number","onChangeDifficulty","target","onClickNumber","number","undo_move","hist","arr","pop","undefined","clear_cell","cell_hint","change_mistakes_mode","clear_number_section","numsec","getElementById","list_op","style","backgroundColor","color","change_fast_mode","start_new_game","close_new_game_modal","onClickOverlay","visibility","open_new_game_modal","complete_board","change_sudoku_mode","mode","console","log","display","className","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\n\nimport { getSudoku } from './solver/sudoku';\n\n// The Sudoku Board + Gameplay\nexport function Game (){\n  \n  let { numberSelected, setNumberSelected,\n        gameArray, setGameArray,\n        initArray, setInitArray,\n        cellSelected, setCellSelected,\n        difficulty, setDifficulty,\n        setTimeGameStarted,\n        fastMode, setFastMode,\n        setWon } = useSudokuContext();\n\n  let [ mistakesMode, setMistakesMode ] = useState(false);\n  let [ history, setHistory ] = useState([]);\n  let [ solvedArray, setSolvedArray ] = useState([]);\n  let [ overlay, setOverlay ] = useState(false);\n\n  let [tempcell, setTempCell] = useState(-1)\n\n  let nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                   '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n\n  // New Game + Initialise Variables\n  function createNewGame(e) {\n    let [ temporaryInitArray, temporarySolvedArray ] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  // Let the User enter a board of their choosing (no initial blocks)\n  function user_input_board_mode() {\n    setInitArray(nullArray);\n    setSolvedArray(nullArray);\n    setGameArray(nullArray);\n  }\n\n  // Solve their sudoku problem\n  function user_input_solve() {\n    let sudoku = getSudoku();\n    const num_rows = document.getElementsByClassName(\"sudoku_row\");\n    let sudoku_string = '';\n    let MIN_NUM = 17;\n    let counter = 0;\n    for (let i = 0; i < num_rows.length; i++) {\n      const col = num_rows[i].getElementsByTagName(\"td\");\n      for (let j = 0; j < col.length; j++) {\n        const num = col[j].innerText;\n        if (num === \"0\") {\n          sudoku_string += '.'\n        } else {\n          sudoku_string += num; \n          counter++;\n        }\n      }\n    }\n    if (counter < MIN_NUM) {\n      alert('Need at least 17 Entries!')\n    } else {\n      setGameArray(sudoku.solve(sudoku_string));\n    }\n    \n  }\n\n\n  // Boolean to check if user has completed the Game\n  function won_game(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n        if (cellIndex === index) {\n          return value === solvedArray[cellIndex];\n        } else {\n          return cell === solvedArray[cellIndex];\n        }\n      })) {\n      return true;\n    }\n    return false;\n  }\n\n  // Assign the cell (index) a value\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (won_game(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  // User sets the cell value with cell_value function\n  function user_cell_value(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n    } else {\n      cell_value(index, value);\n    }\n  }\n\n\n  // ======================================================================\n  // ======================== RIGHT SIDE FUNCTIONS ========================\n  // ======================================================================\n\n  // Clicking the Cell\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      user_cell_value(indexOfArray, numberSelected);\n    }\n    \n    setCellSelected(indexOfArray);\n\n    window.addEventListener('keypress', function (e) {user_type_number(e, indexOfArray)}, {once : true})\n  }\n\n  // Function to allow the user to manually type the numbers\n  function user_type_number(event, index) {\n    const value = event.key;\n    if (is_valid_input_number(event.key)) {\n      user_cell_value(index, value);\n      setCellSelected(-1);\n    }\n  }\n\n  // Change difficulty makes a new game with varying num tiles (less tiles = harder)\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  }\n\n  // Selected number is the one the cell will change to\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number)\n    } \n    else if (cellSelected !== -1) {\n      user_cell_value(cellSelected,number);\n    }\n  }\n\n  // Goes back 1 move (using history)\n  function undo_move() {\n    if(history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined)\n        setGameArray(arr);\n    }\n  }\n\n  // Clear cell: only a typed in cell can be erased\n  function clear_cell() {\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  }\n\n  // Hint: the selected cell will just fill the cell to be the correct number\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  // Annoying bug makes it so changing mode won't update instantly, requires reclick\n  function clear_number_section() {\n    const numsec = document.getElementById(\"number_section\");\n    const list_op = numsec.getElementsByClassName(\"number_option\");\n    for(let i =0; i < list_op.length; i++) {\n      list_op[i].style.backgroundColor = \"rgb(18, 24, 44)\";\n      list_op[i].style.color = \"rgb(178, 204, 229)\";\n    }\n  }\n  // Fast mode: click on tile will change it to be last selected number\n  function change_fast_mode() {\n    clear_number_section();\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // New game starts\n  function start_new_game() {\n    createNewGame();\n    close_new_game_modal();\n  }\n  // Won game opens a modal, clicking it will remove\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  }\n  // Modal Pop Up for starting a new game\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  }\n  \n  // Complete Sudoku Board\n  function complete_board() {\n    let tempHistory = history.slice();\n    tempHistory.push(gameArray.slice());\n    setHistory(tempHistory);\n    setGameArray(solvedArray);\n  }\n  \n  // Change the mode between sudoku game and solver modes\n  function change_sudoku_mode() {\n    const mode = document.getElementById(\"sudoku_mode_options\").value;\n    console.log(mode);\n    if (mode === \"sudoku_solver_option\") {\n      start_new_game();\n      user_input_board_mode();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"none\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"block\";\n    } else {\n      start_new_game();\n      document.getElementById(\"sudoku_game_op_btns\").style.display = \"block\";\n      document.getElementById(\"sudoku_solver_op_btns\").style.display = \"none\";\n    }\n  }\n\n  function is_valid_input_number(key) {\n    if (key === '1' || key === '2' || key === '3' || key === '4' || key === '5' || \n        key === '6' || key === '7' || key === '8' || key === '9' || key === '0') {\n        return true;\n      } else {\n        return false;\n      }\n  }\n  // Start a New Game\n  useEffect(() => {\n    \n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function(e){   \n      if(e.target !== document.getElementsByClassName('sudoku_game')[0] &&\n        !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      } \n    });\n    createNewGame();\n  }, []);\n  \n\n  return (\n    <div>\n      <select id=\"sudoku_mode_options\" name=\"sudoku_mode_options\" defaultValue=\"Sudoku Game\" onChange={change_sudoku_mode}>\n        <option value=\"sudoku_game_option\">Sudoku Game</option>\n        <option value=\"sudoku_solver_option\">Sudoku Solver</option>\n      </select>\n\n      <div className={overlay?\"container blur\":\"container \"}  >\n        <div className=\"innercontainer center_div\">\n          <GameSection\n            onClick={(indexOfArray) => onClickCell(indexOfArray)}\n          />\n          <StatusSection\n            onClickNumber={(number) => onClickNumber(number)}\n            onChange={(e) => onChangeDifficulty(e)}\n            undo_move={undo_move}\n            clear_cell={clear_cell}\n            cell_hint={cell_hint}\n            change_mistakes_mode={change_mistakes_mode}\n            change_fast_mode={change_fast_mode}\n          />\n        </div>\n      </div>\n      \n      <span id=\"sudoku_game_op_btns\">\n        <button className='new_game_btn' onClick={open_new_game_modal}>New Game</button>\n        <button className='new_game_btn' onClick={complete_board}>Complete</button>\n      </span>\n      <span id=\"sudoku_solver_op_btns\">\n        <button className='new_game_btn' onClick={user_input_board_mode}>Start Over</button>\n        <button className='new_game_btn' onClick={user_input_solve}>Solve</button>\n      </span>\n      \n      <div className=\"new_game_modal\" id=\"new_game_modal\">\n        <div className=\"ngm_container\">\n          <div className='nbm_text'>Do you wish to start a new game?</div>\n          <button className='ngb' onClick={start_new_game}>Yes</button>\n          <button className='ngb' onClick={close_new_game_modal}>No</button>\n          <button className=\"ngm_close\" onClick={close_new_game_modal}>X</button>\n        </div>\n      </div>\n\n      <div className= { overlay ? \"overlay o_block\" : \"overlay\" } onClick={onClickOverlay} >\n        <h2 className=\"gameover_text\">\n          <span className=\"gameover_col_2\">You </span>\n          <span className=\"gameover_col_1\">Solved </span> \n          <span className=\"gameover_col_2\">IT! </span>\n        </h2>\n      </div>\n</div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}