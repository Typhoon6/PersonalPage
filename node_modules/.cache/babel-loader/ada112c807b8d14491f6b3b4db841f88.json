{"ast":null,"code":"const {\n  makepuzzle,\n  solvepuzzle\n} = require('sudoku');\n\nconst {\n  List\n} = require('immutable'); //HARD=25,MEDIUM=35,EASY=45\n\n\nconst DIFFICULTIES = {\n  EASY: 'EASY',\n  MEDIUM: 'MEDIUM',\n  HARD: 'HARD'\n};\nconst DIFF_FORMATTER = {\n  EASY: () => Math.floor(Math.random() * 5) <= 1,\n  MEDIUM: () => Math.floor(Math.random() * 15) <= 2,\n  HARD: () => Math.floor(Math.random() * 40) <= 2\n};\n\nconst getInitalValues = board => {\n  let initialValues = 0;\n  board.forEach(x => x !== null && initialValues++);\n  return initialValues;\n};\n\nconst addAnswers = (difficulty, board, answerBoard) => {\n  return board.map((v, index) => {\n    if (DIFF_FORMATTER[difficulty]()) {\n      v = difficulty === DIFFICULTIES.HARD ? null : answerBoard[index];\n    }\n\n    return v;\n  });\n};\n\nconst getBoard = difficulty => {\n  let arr = [];\n  const x = makepuzzle();\n  const y = solvepuzzle(x);\n  const initialAnswers = addAnswers(difficulty, x, y);\n  const board = y.reduce((acc, j, i) => {\n    const formatValue = v => v === null ? null : v + 1;\n\n    if (arr.length === 8) {\n      const y = [...arr, {\n        answer: formatValue(j),\n        value: formatValue(initialAnswers[i])\n      }];\n      arr = [];\n      return acc.push(y);\n    } else {\n      arr = [...arr, {\n        answer: formatValue(j),\n        value: formatValue(initialAnswers[i])\n      }];\n      return acc;\n    }\n  }, new List());\n  return board;\n};\n\nconst easy = () => {\n  return getBoard(DIFFICULTIES.EASY);\n};\n\nconst medium = () => {\n  return getBoard(DIFFICULTIES.MEDIUM);\n};\n\nconst hard = () => {\n  return getBoard(DIFFICULTIES.HARD);\n};\n\nconst Sudoku = {\n  easy,\n  medium,\n  hard\n};\nmodule.exports = Sudoku;","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/node_modules/t-sudoku-generator/index.js"],"names":["makepuzzle","solvepuzzle","require","List","DIFFICULTIES","EASY","MEDIUM","HARD","DIFF_FORMATTER","Math","floor","random","getInitalValues","board","initialValues","forEach","x","addAnswers","difficulty","answerBoard","map","v","index","getBoard","arr","y","initialAnswers","reduce","acc","j","i","formatValue","length","answer","value","push","easy","medium","hard","Sudoku","module","exports"],"mappings":"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","sourcesContent":["const { makepuzzle, solvepuzzle } = require('sudoku');\nconst { List } = require('immutable');\n\n//HARD=25,MEDIUM=35,EASY=45\n\nconst DIFFICULTIES = {\n  EASY: 'EASY',\n  MEDIUM: 'MEDIUM',\n  HARD: 'HARD'\n};\nconst DIFF_FORMATTER = {\n  EASY: () => Math.floor(Math.random() * 5) <= 1,\n  MEDIUM: () => Math.floor(Math.random() * 15) <= 2,\n  HARD: () => Math.floor(Math.random() * 40) <= 2\n};\n\nconst getInitalValues = board => {\n  let initialValues = 0;\n\n  board.forEach(x => x !== null && initialValues++);\n\n  return initialValues;\n};\n\nconst addAnswers = (difficulty, board, answerBoard) => {\n  return board.map((v, index) => {\n    if (DIFF_FORMATTER[difficulty]()) {\n      v = difficulty === DIFFICULTIES.HARD ? null : answerBoard[index];\n    }\n\n    return v;\n  });\n};\n\nconst getBoard = difficulty => {\n  let arr = [];\n  const x = makepuzzle();\n  const y = solvepuzzle(x);\n\n  const initialAnswers = addAnswers(difficulty, x, y);\n\n  const board = y.reduce((acc, j, i) => {\n    const formatValue = v => (v === null ? null : v + 1);\n    if (arr.length === 8) {\n      const y = [\n        ...arr,\n        { answer: formatValue(j), value: formatValue(initialAnswers[i]) }\n      ];\n      arr = [];\n      return acc.push(y);\n    } else {\n      arr = [\n        ...arr,\n        { answer: formatValue(j), value: formatValue(initialAnswers[i]) }\n      ];\n      return acc;\n    }\n  }, new List());\n  return board;\n};\n\nconst easy = () => {\n  return getBoard(DIFFICULTIES.EASY);\n};\nconst medium = () => {\n  return getBoard(DIFFICULTIES.MEDIUM);\n};\nconst hard = () => {\n  return getBoard(DIFFICULTIES.HARD);\n};\n\nconst Sudoku = {\n  easy,\n  medium,\n  hard\n};\nmodule.exports = Sudoku;\n"]},"metadata":{},"sourceType":"script"}