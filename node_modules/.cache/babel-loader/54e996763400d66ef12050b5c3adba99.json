{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\src\\\\pages\\\\Sudoku\\\\game\\\\sudoku.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { easy, medium, hard } from 't-sudoku-generator';\nimport { EventEmitter } from 'events';\nimport Square from '../game-square/sudoku-square';\nimport ButtonBar from '../button-bar';\nimport { Main, Board } from './sudoku.styled';\nimport { Reset } from '../reset';\nimport { Validate } from '../validate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const _events = new EventEmitter();\nconst BOARD_GETTERS = {\n  easy,\n  medium,\n  hard\n};\nconst defaultState = {\n  startDate: Date.now(),\n  selectedBoardIndex: null,\n  values: {},\n  board: [],\n  done: false,\n  selectedRowIndex: null,\n  selectedIndex: null,\n  openDialog: false,\n  notes: {},\n  noteEnabled: false,\n  history: [],\n  moveCount: 0,\n  showReset: false,\n  showValidate: false,\n  hasValidated: false\n};\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...defaultState,\n      difficulty: this.props.difficulty\n    };\n\n    this.onKeypress = e => {\n      const charCode = typeof e.which === 'number' ? e.which : e.keyCode;\n      const value = charCode - 48;\n      if (value > 0 && value <= 9) this.handleButtonPress(value); // if keypress is the escape or delete key, delete the value set\n\n      if (charCode === 27 || charCode === 8) this.handleButtonPress(null);\n    };\n\n    this.setSelectedBoardIndexes = _ref => {\n      let { ...indexes\n      } = _ref;\n      return this.setState({ ...indexes\n      });\n    };\n\n    this.setValue = (boardIndex, value) => {\n      const {\n        values,\n        notes\n      } = this.state;\n      this.setState({\n        values: Object.assign(values, {\n          [`${boardIndex}`]: value\n        })\n      });\n      this.setState({\n        notes: { ...notes,\n          [boardIndex]: []\n        }\n      });\n      this.isDone();\n    };\n\n    this.isDone = () => {\n      const {\n        values\n      } = this.state;\n      let done = true;\n      if (Object.keys(values).length === 0) return;\n      Object.keys(values).forEach(v => {\n        if (values[v].value === '' || values[v].value === null) done = false;\n      });\n\n      if (done) {\n        this.setState({\n          done\n        }, () => this.validate());\n      }\n    };\n\n    this.getBoardIndex = (index, rowIndex) => rowIndex * 9 - (9 - index);\n\n    this.toggleValidate = () => this.setState({\n      showValidate: !this.state.showValidate\n    });\n\n    this.handleButtonPress = value => {\n      const {\n        selectedBoardIndex,\n        values,\n        notes,\n        noteEnabled,\n        history,\n        moveCount\n      } = this.state;\n      const selectedBoardIndexValue = values[selectedBoardIndex];\n      const actionValues = ['notes', 'undo', 'reset', 'validate'];\n      if (value === 'undo') this.undoLastMove();\n      if (value === 'reset') this.toggleReset();\n      if (value === 'validate') this.toggleValidate();\n      if (selectedBoardIndex === null) return;\n      if (selectedBoardIndexValue.isOriginal) return;\n      if (!noteEnabled && !actionValues.includes(value)) this.setState({\n        history: [{\n          boardIndex: selectedBoardIndex,\n          value\n        }, ...history],\n        moveCount: moveCount + 1\n      });\n\n      if (noteEnabled && !actionValues.includes(value)) {\n        const existingNotes = value ? notes[selectedBoardIndex] || [] : [];\n        this.setState({\n          notes: { ...notes,\n            [selectedBoardIndex]: existingNotes.includes(value) ? existingNotes.filter(note => note !== value) : [...existingNotes, value].filter(val => val).sort()\n          },\n          values: Object.assign(values, {\n            [`${selectedBoardIndex}`]: Object.assign(selectedBoardIndexValue, {\n              value: null\n            })\n          })\n        });\n      } else if (value === 'notes') {\n        this.setState({\n          noteEnabled: !noteEnabled\n        });\n      } else if (!actionValues.includes(value)) {\n        const {\n          error,\n          answer\n        } = selectedBoardIndexValue;\n        this.setValue(selectedBoardIndex, Object.assign(selectedBoardIndexValue, {\n          value,\n          error: error && answer !== value\n        }));\n      }\n    };\n\n    this.validate = () => {\n      const {\n        done,\n        values,\n        startDate,\n        moveCount,\n        hasValidated\n      } = this.state;\n      const {\n        onComplete\n      } = this.props;\n      let errors = false;\n      Object.values(values).forEach(_ref2 => {\n        let {\n          value,\n          answer\n        } = _ref2;\n        if (value !== answer) errors = true;\n      });\n      if (done && !errors) onComplete({\n        moves: moveCount,\n        hasValidated\n      });\n    };\n\n    this.getValue = boardIndex => {\n      const {\n        values\n      } = this.state;\n      const valueForIndex = values[boardIndex];\n      return valueForIndex && valueForIndex.value;\n    };\n\n    this.buildRow = rowIndex => (_ref3, index) => {\n      let {\n        value: initialValue,\n        answer\n      } = _ref3;\n      const {\n        notes,\n        difficulty,\n        values\n      } = this.state;\n      const {\n        selectedBoardIndex,\n        selectedIndex,\n        selectedRowIndex\n      } = this.state;\n      const {\n        hide\n      } = this.props;\n      const boardIndex = this.getBoardIndex(index + 1, rowIndex + 1);\n      const value = this.getValue(boardIndex);\n      return /*#__PURE__*/_jsxDEV(Square, {\n        value: value,\n        hasError: (values[boardIndex] || {}).error,\n        initialValue: initialValue,\n        answer: answer,\n        rowIndex: rowIndex + 1,\n        boardIndex: boardIndex,\n        index: index + 1,\n        hide: hide,\n        selectedIndex: selectedIndex,\n        selectedRowIndex: selectedRowIndex,\n        selectedBoardIndex: selectedBoardIndex,\n        setSelectedBoardIndexes: this.setSelectedBoardIndexes,\n        setValue: this.setValue,\n        notes: notes[boardIndex] || []\n      }, `${difficulty}-${(rowIndex + 1) * index + 10}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.undoLastMove = () => {\n      const {\n        history\n      } = this.state;\n      if (!history.length) return;\n      const moveToUndo = history.shift();\n      const {\n        value: newValue\n      } = history.find(_ref4 => {\n        let {\n          boardIndex\n        } = _ref4;\n        return boardIndex === moveToUndo.boardIndex;\n      }) || {};\n      this.setState(_ref5 => {\n        let {\n          values,\n          moveCount\n        } = _ref5;\n        values[moveToUndo.boardIndex] = { ...values[moveToUndo.boardIndex],\n          value: newValue || null\n        };\n        moveCount++;\n        return {\n          values,\n          moveCount\n        };\n      });\n    };\n\n    this.toggleReset = () => this.setState({\n      showReset: !this.state.showReset\n    });\n\n    this.resetBoard = () => {\n      const {\n        history,\n        values,\n        moveCount\n      } = this.state;\n      if (!history.length) return this.toggleReset();\n      const indexesToNull = [...new Set(history.map(_ref6 => {\n        let {\n          boardIndex\n        } = _ref6;\n        return boardIndex.toString();\n      }))];\n      const newValues = Object.keys(values).reduce((acc, key) => {\n        if (indexesToNull.includes(key)) acc[key] = { ...values[key],\n          value: null\n        };else acc[key] = values[key];\n        return acc;\n      }, {});\n      this.setState({\n        values: newValues,\n        moveCount: moveCount + 1,\n        history: []\n      }, () => this.toggleReset());\n    };\n\n    this.validateCurrentBoard = () => {\n      const {\n        values\n      } = this.state;\n      const validatedValues = Object.keys(values).reduce((acc, key) => {\n        const value = values[key];\n        if (!value.isOriginal && value.value !== null && value.answer !== value.value) acc[key] = { ...value,\n          error: true\n        };else if (value.error && value.answer === value.value) acc[key] = { ...value,\n          error: false\n        };else acc[key] = value;\n        return acc;\n      }, {});\n      this.setState({\n        values: validatedValues,\n        showValidate: false,\n        moveCount: this.state.moveCount + 1,\n        hasValidated: true\n      });\n    };\n\n    this.buildBoard = (x, i) => /*#__PURE__*/_jsxDEV(Board, {\n      children: x.map(this.buildRow(i))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 26\n    }, this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.onKeypress);\n\n    _events.on('reset', difficulty => {\n      this.setState({ ...defaultState,\n        startDate: Date.now(),\n        board: BOARD_GETTERS[difficulty](),\n        difficulty\n      });\n    });\n\n    _events.emit('reset', this.props.difficulty);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.onKeypress);\n\n    _events.removeAllListeners('reset');\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty) _events.emit('reset', this.props.difficulty);\n  }\n\n  buildResetModal() {\n    const {\n      CustomResetModal\n    } = this.props;\n    const props = {\n      primaryAction: this.resetBoard,\n      cancelAction: this.toggleReset\n    };\n    if (!CustomResetModal) return /*#__PURE__*/_jsxDEV(Reset, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 35\n    }, this);\n    return CustomResetModal(props);\n  }\n\n  buildValidateModal() {\n    const {\n      CustomValidateModal\n    } = this.props;\n    const props = {\n      primaryAction: this.validateCurrentBoard,\n      cancelAction: this.toggleValidate\n    };\n    if (!CustomValidateModal) return /*#__PURE__*/_jsxDEV(Validate, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 38\n    }, this);\n    return CustomValidateModal(props);\n  }\n\n  render() {\n    const {\n      noteEnabled,\n      selectedBoardIndex,\n      notes,\n      board,\n      showValidate,\n      showReset\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [showReset && this.buildResetModal(), showValidate && this.buildValidateModal(), /*#__PURE__*/_jsxDEV(Main, {\n        children: board.map(this.buildBoard)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonBar, {\n        onClick: this.handleButtonPress,\n        enabledButtons: noteEnabled ? ['notes', ...(notes[selectedBoardIndex] || [])] : []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSudoku.propTypes = {\n  difficulty: PropTypes.oneOf(['easy', 'medium', 'hard']),\n  onComplete: PropTypes.func,\n  CustomResetModal: PropTypes.oneOfType([PropTypes.symbol, PropTypes.func]),\n  CustomValidateModal: PropTypes.oneOfType([PropTypes.symbol, PropTypes.func])\n};\nSudoku.defaultProps = {\n  difficulty: 'easy',\n  onComplete: () => null\n};\nexport default Sudoku;","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/game/sudoku.js"],"names":["React","Fragment","PropTypes","easy","medium","hard","EventEmitter","Square","ButtonBar","Main","Board","Reset","Validate","_events","BOARD_GETTERS","defaultState","startDate","Date","now","selectedBoardIndex","values","board","done","selectedRowIndex","selectedIndex","openDialog","notes","noteEnabled","history","moveCount","showReset","showValidate","hasValidated","Sudoku","Component","state","difficulty","props","onKeypress","e","charCode","which","keyCode","value","handleButtonPress","setSelectedBoardIndexes","indexes","setState","setValue","boardIndex","Object","assign","isDone","keys","length","forEach","v","validate","getBoardIndex","index","rowIndex","toggleValidate","selectedBoardIndexValue","actionValues","undoLastMove","toggleReset","isOriginal","includes","existingNotes","filter","note","val","sort","error","answer","onComplete","errors","moves","getValue","valueForIndex","buildRow","initialValue","hide","moveToUndo","shift","newValue","find","resetBoard","indexesToNull","Set","map","toString","newValues","reduce","acc","key","validateCurrentBoard","validatedValues","buildBoard","x","i","componentDidMount","document","addEventListener","on","emit","componentWillUnmount","removeEventListener","removeAllListeners","componentDidUpdate","prevProps","buildResetModal","CustomResetModal","primaryAction","cancelAction","buildValidateModal","CustomValidateModal","render","propTypes","oneOf","func","oneOfType","symbol","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { easy, medium, hard } from 't-sudoku-generator';\nimport { EventEmitter } from 'events';\n\nimport Square from '../game-square/sudoku-square';\nimport ButtonBar from '../button-bar';\n\nimport { Main, Board } from './sudoku.styled';\n\nimport { Reset } from '../reset';\nimport { Validate } from '../validate';\n\nexport const _events = new EventEmitter();\n\nconst BOARD_GETTERS = {\n  easy,\n  medium,\n  hard,\n};\n\nconst defaultState = {\n  startDate: Date.now(),\n  selectedBoardIndex: null,\n  values: {},\n  board: [],\n  done: false,\n  selectedRowIndex: null,\n  selectedIndex: null,\n  openDialog: false,\n  notes: {},\n  noteEnabled: false,\n  history: [],\n  moveCount: 0,\n  showReset: false,\n  showValidate: false,\n  hasValidated: false,\n};\n\nclass Sudoku extends React.Component {\n  static propTypes = {\n    difficulty: PropTypes.oneOf(['easy', 'medium', 'hard']),\n    onComplete: PropTypes.func,\n    CustomResetModal: PropTypes.oneOfType([PropTypes.symbol, PropTypes.func]),\n    CustomValidateModal: PropTypes.oneOfType([\n      PropTypes.symbol,\n      PropTypes.func,\n    ]),\n  };\n  static defaultProps = { difficulty: 'easy', onComplete: () => null };\n\n  state = { ...defaultState, difficulty: this.props.difficulty };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.onKeypress);\n\n    _events.on('reset', difficulty => {\n      this.setState({\n        ...defaultState,\n        startDate: Date.now(),\n        board: BOARD_GETTERS[difficulty](),\n        difficulty,\n      });\n    });\n\n    _events.emit('reset', this.props.difficulty);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.onKeypress);\n    _events.removeAllListeners('reset');\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty)\n      _events.emit('reset', this.props.difficulty);\n  }\n\n  onKeypress = e => {\n    const charCode = typeof e.which === 'number' ? e.which : e.keyCode;\n\n    const value = charCode - 48;\n    if (value > 0 && value <= 9) this.handleButtonPress(value);\n\n    // if keypress is the escape or delete key, delete the value set\n    if (charCode === 27 || charCode === 8) this.handleButtonPress(null);\n  };\n\n  setSelectedBoardIndexes = ({ ...indexes }) => this.setState({ ...indexes });\n\n  setValue = (boardIndex, value) => {\n    const { values, notes } = this.state;\n\n    this.setState({\n      values: Object.assign(values, {\n        [`${boardIndex}`]: value,\n      }),\n    });\n    this.setState({\n      notes: {\n        ...notes,\n        [boardIndex]: [],\n      },\n    });\n    this.isDone();\n  };\n\n  isDone = () => {\n    const { values } = this.state;\n    let done = true;\n\n    if (Object.keys(values).length === 0) return;\n    Object.keys(values).forEach(v => {\n      if (values[v].value === '' || values[v].value === null) done = false;\n    });\n\n    if (done) {\n      this.setState({ done }, () => this.validate());\n    }\n  };\n\n  getBoardIndex = (index, rowIndex) => rowIndex * 9 - (9 - index);\n\n  buildResetModal() {\n    const { CustomResetModal } = this.props;\n\n    const props = {\n      primaryAction: this.resetBoard,\n      cancelAction: this.toggleReset,\n    };\n\n    if (!CustomResetModal) return <Reset {...props} />;\n\n    return CustomResetModal(props);\n  }\n\n  buildValidateModal() {\n    const { CustomValidateModal } = this.props;\n\n    const props = {\n      primaryAction: this.validateCurrentBoard,\n      cancelAction: this.toggleValidate,\n    };\n\n    if (!CustomValidateModal) return <Validate {...props} />;\n\n    return CustomValidateModal(props);\n  }\n\n  toggleValidate = () =>\n    this.setState({ showValidate: !this.state.showValidate });\n\n  handleButtonPress = value => {\n    const {\n      selectedBoardIndex,\n      values,\n      notes,\n      noteEnabled,\n      history,\n      moveCount,\n    } = this.state;\n    const selectedBoardIndexValue = values[selectedBoardIndex];\n\n    const actionValues = ['notes', 'undo', 'reset', 'validate'];\n\n    if (value === 'undo') this.undoLastMove();\n    if (value === 'reset') this.toggleReset();\n    if (value === 'validate') this.toggleValidate();\n\n    if (selectedBoardIndex === null) return;\n    if (selectedBoardIndexValue.isOriginal) return;\n\n    if (!noteEnabled && !actionValues.includes(value))\n      this.setState({\n        history: [{ boardIndex: selectedBoardIndex, value }, ...history],\n        moveCount: moveCount + 1,\n      });\n    if (noteEnabled && !actionValues.includes(value)) {\n      const existingNotes = value ? notes[selectedBoardIndex] || [] : [];\n      this.setState({\n        notes: {\n          ...notes,\n          [selectedBoardIndex]: existingNotes.includes(value)\n            ? existingNotes.filter(note => note !== value)\n            : [...existingNotes, value].filter(val => val).sort(),\n        },\n        values: Object.assign(values, {\n          [`${selectedBoardIndex}`]: Object.assign(selectedBoardIndexValue, {\n            value: null,\n          }),\n        }),\n      });\n    } else if (value === 'notes') {\n      this.setState({\n        noteEnabled: !noteEnabled,\n      });\n    } else if (!actionValues.includes(value)) {\n      const { error, answer } = selectedBoardIndexValue;\n\n      this.setValue(\n        selectedBoardIndex,\n        Object.assign(selectedBoardIndexValue, {\n          value,\n          error: error && answer !== value,\n        })\n      );\n    }\n  };\n\n  validate = () => {\n    const { done, values, startDate, moveCount, hasValidated } = this.state;\n    const { onComplete } = this.props;\n\n    let errors = false;\n    Object.values(values).forEach(({ value, answer }) => {\n      if (value !== answer) errors = true;\n    });\n\n    if (done && !errors)\n      onComplete({\n        moves: moveCount,\n        hasValidated,\n      });\n  };\n\n  getValue = boardIndex => {\n    const { values } = this.state;\n    const valueForIndex = values[boardIndex];\n\n    return valueForIndex && valueForIndex.value;\n  };\n\n  buildRow = rowIndex => ({ value: initialValue, answer }, index) => {\n    const { notes, difficulty, values } = this.state;\n    const { selectedBoardIndex, selectedIndex, selectedRowIndex } = this.state;\n    const { hide } = this.props;\n    const boardIndex = this.getBoardIndex(index + 1, rowIndex + 1);\n    const value = this.getValue(boardIndex);\n\n    return (\n      <Square\n        key={`${difficulty}-${(rowIndex + 1) * index + 10}`}\n        value={value}\n        hasError={(values[boardIndex] || {}).error}\n        initialValue={initialValue}\n        answer={answer}\n        rowIndex={rowIndex + 1}\n        boardIndex={boardIndex}\n        index={index + 1}\n        hide={hide}\n        selectedIndex={selectedIndex}\n        selectedRowIndex={selectedRowIndex}\n        selectedBoardIndex={selectedBoardIndex}\n        setSelectedBoardIndexes={this.setSelectedBoardIndexes}\n        setValue={this.setValue}\n        notes={notes[boardIndex] || []}\n      />\n    );\n  };\n\n  undoLastMove = () => {\n    const { history } = this.state;\n    if (!history.length) return;\n    const moveToUndo = history.shift();\n\n    const { value: newValue } =\n      history.find(({ boardIndex }) => boardIndex === moveToUndo.boardIndex) ||\n      {};\n\n    this.setState(({ values, moveCount }) => {\n      values[moveToUndo.boardIndex] = {\n        ...values[moveToUndo.boardIndex],\n        value: newValue || null,\n      };\n      moveCount++;\n\n      return { values, moveCount };\n    });\n  };\n\n  toggleReset = () => this.setState({ showReset: !this.state.showReset });\n\n  resetBoard = () => {\n    const { history, values, moveCount } = this.state;\n\n    if (!history.length) return this.toggleReset();\n\n    const indexesToNull = [\n      ...new Set(history.map(({ boardIndex }) => boardIndex.toString())),\n    ];\n\n    const newValues = Object.keys(values).reduce((acc, key) => {\n      if (indexesToNull.includes(key))\n        acc[key] = { ...values[key], value: null };\n      else acc[key] = values[key];\n\n      return acc;\n    }, {});\n\n    this.setState(\n      { values: newValues, moveCount: moveCount + 1, history: [] },\n      () => this.toggleReset()\n    );\n  };\n\n  validateCurrentBoard = () => {\n    const { values } = this.state;\n\n    const validatedValues = Object.keys(values).reduce((acc, key) => {\n      const value = values[key];\n      if (\n        !value.isOriginal &&\n        value.value !== null &&\n        value.answer !== value.value\n      )\n        acc[key] = { ...value, error: true };\n      else if (value.error && value.answer === value.value)\n        acc[key] = { ...value, error: false };\n      else acc[key] = value;\n\n      return acc;\n    }, {});\n\n    this.setState({\n      values: validatedValues,\n      showValidate: false,\n      moveCount: this.state.moveCount + 1,\n      hasValidated: true,\n    });\n  };\n\n  buildBoard = (x, i) => <Board key={i}>{x.map(this.buildRow(i))}</Board>;\n\n  render() {\n    const {\n      noteEnabled,\n      selectedBoardIndex,\n      notes,\n      board,\n      showValidate,\n      showReset,\n    } = this.state;\n\n    return (\n      <Fragment>\n        {showReset && this.buildResetModal()}\n        {showValidate && this.buildValidateModal()}\n        <Main>{board.map(this.buildBoard)}</Main>\n        <ButtonBar\n          onClick={this.handleButtonPress}\n          enabledButtons={\n            noteEnabled ? ['notes', ...(notes[selectedBoardIndex] || [])] : []\n          }\n        />\n      </Fragment>\n    );\n  }\n}\nexport default Sudoku;\n"]},"metadata":{},"sourceType":"module"}