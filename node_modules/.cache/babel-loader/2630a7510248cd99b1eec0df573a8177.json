{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\Future\\\\personal-project\\\\src\\\\pages\\\\Sudoku\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext'; // The Sudoku Board + Gameplay\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Game() {\n  _s();\n\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    initArray,\n    setInitArray,\n    cellSelected,\n    setCellSelected,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    setWon\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState(false);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false); // New Game + Initialise Variables\n\n  function createNewGame(e) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n  /**\n   * 检查游戏是否已解决。\n   */\n\n\n  function _isSolved(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n      if (cellIndex === index) return value === solvedArray[cellIndex];else return cell === solvedArray[cellIndex];\n    })) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * 用给定的“值”填充单元格\n   * 用于根据需要填充/擦除。\n   */\n\n\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n  /**\n   * “用户填写”将传递给\n   * 上面的 cell_value 函数。\n   */\n\n\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      } else {}\n    } else {\n      cell_value(index, value);\n    }\n  }\n  /**\n   * 点击“新游戏”链接，\n   *创建一个新游戏。\n   */\n\n\n  function onClickNewGame() {\n    createNewGame();\n    close_new_game_modal();\n  }\n  /**\n   * 单击游戏单元格。\n   */\n\n\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n\n    setCellSelected(indexOfArray);\n  }\n  /**\n   * 关于改变难度，\n   * 1. 更新“难度”等级\n   * 2. 创建新游戏\n   */\n\n\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  }\n  /**\n   * 单击状态部分中的数字时，\n   *填充单元格或设置数字。\n   */\n\n\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  } // Goes back 1 move\n\n\n  function undo_move() {\n    if (history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined) setGameArray(arr);\n    }\n  } // Clear cell: only a typed in cell can be erased\n\n\n  function clear_cell() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  } // Hint: the selected cell will just fill the cell to be the correct number\n\n\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  } // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n\n\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  } // Fast mode: click on tile will change it to be last selected number\n\n\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  } // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // Won game opens a modal, clicking it will remove\n\n\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  } // Modal Pop Up for starting a new game\n\n\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  } // Start a New Game\n\n\n  useEffect(() => {\n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function (e) {\n      if (e.target !== document.getElementsByClassName('sudoku_game')[0] && !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      }\n    });\n    createNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"container blur\" : \"container \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innercontainer center_div\",\n        children: [/*#__PURE__*/_jsxDEV(GameSection, {\n          onClick: indexOfArray => onClickCell(indexOfArray)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatusSection, {\n          onClickNumber: number => onClickNumber(number),\n          onChange: e => onChangeDifficulty(e),\n          undo_move: undo_move,\n          clear_cell: clear_cell,\n          cell_hint: cell_hint,\n          change_mistakes_mode: change_mistakes_mode,\n          change_fast_mode: change_fast_mode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new_game_btn\",\n      onClick: open_new_game_modal,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_game_modal\",\n      id: \"new_game_modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ngm_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nbm_text\",\n          children: \"Do you wish to start a new game?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: onClickNewGame,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngb\",\n          onClick: close_new_game_modal,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ngm_close\",\n          onClick: close_new_game_modal,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"overlay overlay--visible\" : \"overlay\",\n      onClick: onClickOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"overlay__text\",\n        children: [\"You \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan1\",\n          children: \"solved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan2\",\n          children: \"it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"WbchbVeU3dZzqf+vd6G3/DO72N4=\", false, function () {\n  return [useSudokuContext];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/admin/Downloads/Future/personal-project/src/pages/Sudoku/Game.js"],"names":["React","useState","useEffect","moment","GameSection","StatusSection","getUniqueSudoku","useSudokuContext","Game","numberSelected","setNumberSelected","gameArray","setGameArray","initArray","setInitArray","cellSelected","setCellSelected","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","setWon","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","createNewGame","e","temporaryInitArray","temporarySolvedArray","_isSolved","index","value","every","cell","cellIndex","cell_value","tempArray","slice","tempHistory","push","_userFillCell","onClickNewGame","close_new_game_modal","onClickCell","indexOfArray","onChangeDifficulty","target","onClickNumber","number","undo_move","length","hist","arr","pop","undefined","clear_cell","cell_hint","change_mistakes_mode","change_fast_mode","onClickOverlay","document","getElementById","style","visibility","open_new_game_modal","window","addEventListener","getElementsByClassName","className","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport { GameSection } from './components/GameSection';\nimport { StatusSection } from './components/StatusSection';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\n\n// The Sudoku Board + Gameplay\nexport function Game (){\n  \n  let { numberSelected, setNumberSelected,\n        gameArray, setGameArray,\n        initArray, setInitArray,\n        cellSelected, setCellSelected,\n        difficulty, setDifficulty,\n        setTimeGameStarted,\n        fastMode, setFastMode,\n        setWon } = useSudokuContext();\n\n  let [ mistakesMode, setMistakesMode ] = useState(false);\n  let [ history, setHistory ] = useState([]);\n  let [ solvedArray, setSolvedArray ] = useState([]);\n  let [ overlay, setOverlay ] = useState(false);\n\n  // New Game + Initialise Variables\n  function createNewGame(e) {\n    let [ temporaryInitArray, temporarySolvedArray ] = getUniqueSudoku(difficulty, e);\n\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  /**\n   * 检查游戏是否已解决。\n   */\n  function _isSolved(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n          if (cellIndex === index)\n            return value === solvedArray[cellIndex];\n          else\n            return cell === solvedArray[cellIndex];\n        })) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 用给定的“值”填充单元格\n   * 用于根据需要填充/擦除。\n   */\n  function cell_value(index, value) {\n    if (initArray[index] === '0') {\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  /**\n   * “用户填写”将传递给\n   * 上面的 cell_value 函数。\n   */\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        cell_value(index, value);\n      }\n      else {\n      }\n    } else {\n      cell_value(index, value);\n    }\n  }\n\n  /**\n   * 点击“新游戏”链接，\n   *创建一个新游戏。\n   */\n  function onClickNewGame() {\n    createNewGame();\n    close_new_game_modal();\n  }\n\n  /**\n   * 单击游戏单元格。\n   */\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  /**\n   * 关于改变难度，\n   * 1. 更新“难度”等级\n   * 2. 创建新游戏\n   */\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    createNewGame(e);\n  }\n\n  /**\n   * 单击状态部分中的数字时，\n   *填充单元格或设置数字。\n   */\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number)\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected,number);\n    }\n  }\n\n  // Goes back 1 move\n  function undo_move() {\n    if(history.length) {\n      let hist = history.slice();\n      let arr = hist.pop();\n      setHistory(hist);\n      if (arr !== undefined)\n        setGameArray(arr);\n    }\n  }\n\n  // Clear cell: only a typed in cell can be erased\n  function clear_cell() {\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      cell_value(cellSelected, '0');\n    }\n  }\n\n  // Hint: the selected cell will just fill the cell to be the correct number\n  function cell_hint() {\n    if (cellSelected !== -1) {\n      cell_value(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  // Change mistake mode: mode that takes in only correct numbers (won't let human enter a wrong number)\n  function change_mistakes_mode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  // Fast mode: click on tile will change it to be last selected number\n  function change_fast_mode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  // ======================================================================\n  // =========================== GAME MODALS: =============================\n  // ======================================================================\n  // Won game opens a modal, clicking it will remove\n  function onClickOverlay() {\n    setOverlay(false);\n    createNewGame();\n  }\n\n  // Modal Pop Up for starting a new game\n  function close_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"hidden\";\n  }\n  function open_new_game_modal() {\n    document.getElementById(\"new_game_modal\").style.visibility = \"visible\";\n  }\n  \n  // Start a New Game\n  useEffect(() => {\n    // Have so if you click off the board then it removes selection\n    window.addEventListener('click', function(e){   \n      if(e.target !== document.getElementsByClassName('sudoku_game')[0] &&\n        !e.target.className.includes(\"cell\")) {\n        setCellSelected(-1);\n      } \n    });\n    createNewGame();\n  }, []);\n  \n\n  return (\n    <div>\n      <div className={overlay?\"container blur\":\"container \"}  >\n        <div className=\"innercontainer center_div\">\n          <GameSection\n            onClick={(indexOfArray) => onClickCell(indexOfArray)}\n          />\n          <StatusSection\n            onClickNumber={(number) => onClickNumber(number)}\n            onChange={(e) => onChangeDifficulty(e)}\n            undo_move={undo_move}\n            clear_cell={clear_cell}\n            cell_hint={cell_hint}\n            change_mistakes_mode={change_mistakes_mode}\n            change_fast_mode={change_fast_mode}\n          />\n        </div>\n      </div>\n      \n      <button className='new_game_btn' onClick={open_new_game_modal}>New Game</button>\n\n      <div className=\"new_game_modal\" id=\"new_game_modal\">\n        <div className=\"ngm_container\">\n          <div className='nbm_text'>Do you wish to start a new game?</div>\n          <button className='ngb' onClick={onClickNewGame}>Yes</button>\n          <button className='ngb' onClick={close_new_game_modal}>No</button>\n          <button className=\"ngm_close\" onClick={close_new_game_modal}>X</button>\n        </div>\n      </div>\n\n      <div className= { overlay\n                        ? \"overlay overlay--visible\"\n                        : \"overlay\"\n                      }\n           onClick={onClickOverlay}\n      >\n        <h2 className=\"overlay__text\">\n          You <span className=\"overlay__textspan1\">solved</span> <span className=\"overlay__textspan2\">it!</span>\n        </h2>\n      </div>\n</div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}