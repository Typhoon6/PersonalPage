import { isValidValue, isCellValid, getPeers, solve} from '../solverUtils';

describe('SolverUtils', () => {
    it('validates values', () => {
        expect(isValidValue(1)).toBe(true)
        expect(isValidValue(3)).toBe(true)
        expect(isValidValue(9)).toBe(true)
        expect(isValidValue('')).toBe(true)
        expect(isValidValue('a')).toBe(false)
        expect(isValidValue(10)).toBe(false)
    })

    it('checks for valid cells', () => {
        const board = [
            [8, 5, 6, '', 1, 4, 7, 3, ''],
            ['', 9, '', '', '', '', '', '', ''],
            [2, 4, '', '', '', '', 1, 6, ''],
            ['', 6, 2, '', 5, 9, 3, '', ''],
            ['', 3, 1, 8, '', 2, 4, 5, ''],
            ['', '', 5, 3, 4, '', 9, 2, ''],
            ['', 2, 4, '', '', '', '', 7, 3],
            ['', '', '', '', '', '', '', 1, ''],
            ['', 1, 8, 6, 3, '', 2, 9, 4],
        ]

        expect(isCellValid(0, 0, board)).toBe(true)
        expect(isCellValid(4, 0, board)).toBe(true)
    })

    it('checks for non-valid cells', () => {
        const board = [
            [8, 5, 6, 8, 1, 4, 7, 3, ''],
            ['', 9, '', '', '', '', '', '', ''],
            [2, 4, '', '', '', '', 1, 6, ''],
            ['', 6, 2, '', 5, 9, 3, '', ''],
            ['', 3, 1, 8, '', 2, 4, 5, ''],
            ['', '', 5, 3, 4, '', 9, 2, ''],
            ['', 2, 4, '', '', '', '', 7, 3],
            ['', '', '', '', '', '', '', 1, ''],
            ['', 1, 8, 6, 3, '', 2, 9, 4],
        ]

        expect(isCellValid(0, 0, board)).toBe(false)
    })

    it('lists all peers', () => {
        expect(getPeers(0, 0)).toEqual([
            {x: 1, y: 0}, {x: 0, y: 1}, {x: 2, y: 0}, {x: 0, y: 2}, {x: 3, y: 0}, {x: 0, y: 3}, {x: 4, y: 0}, {x: 0, y: 4}, {x: 5, y: 0}, {x: 0, y: 5}, {x: 6, y: 0}, {x: 0, y: 6}, {x: 7, y: 0}, {x: 0, y: 7}, {x: 8, y: 0}, {x: 0, y: 8}, {x: 0, y: 1}, {x: 0, y: 2}, {x: 1, y: 0}, {x: 1, y: 1}, {x: 1, y: 2}, {x: 2, y: 0}, {x: 2, y: 1}, {x: 2, y: 2}
        ])

        expect(getPeers(4, 6)).toEqual([
            {x: 0, y: 6}, {x: 4, y: 0}, {x: 1, y: 6}, {x: 4, y: 1}, {x: 2, y: 6}, {x: 4, y: 2}, {x: 3, y: 6}, {x: 4, y: 3}, {x: 4, y: 4}, {x: 5, y: 6}, {x: 4, y: 5}, {x: 6, y: 6}, {x: 7, y: 6}, {x: 4, y: 7}, {x: 8, y: 6}, {x: 4, y: 8}, {x: 3, y: 6}, {x: 3, y: 7}, {x: 3, y: 8}, {x: 4, y: 7}, {x: 4, y: 8}, {x: 5, y: 6}, {x: 5, y: 7}, {x: 5, y: 8}]
        )

        expect(getPeers(7, 8)).toEqual([
            {x: 0, y: 8}, {x: 7, y: 0}, {x: 1, y: 8}, {x: 7, y: 1}, {x: 2, y: 8}, {x: 7, y: 2}, {x: 3, y: 8}, {x: 7, y: 3}, {x: 4, y: 8}, {x: 7, y: 4}, {x: 5, y: 8}, {x: 7, y: 5}, {x: 6, y: 8}, {x: 7, y: 6}, {x: 7, y: 7}, {x: 8, y: 8}, {x: 6, y: 6}, {x: 6, y: 7}, {x: 6, y: 8}, {x: 7, y: 6}, {x: 7, y: 7}, {x: 8, y: 6}, {x: 8, y: 7}, {x: 8, y: 8}
        ])
    })

    it('solves puzzles', () => {
        const board = [
            [8, 5, 6, '', 1, 4, 7, 3, ''],
            ['', 9, '', '', '', '', '', '', ''],
            [2, 4, '', '', '', '', 1, 6, ''],
            ['', 6, 2, '', 5, 9, 3, '', ''],
            ['', 3, 1, 8, '', 2, 4, 5, ''],
            ['', '', 5, 3, 4, '', 9, 2, ''],
            ['', 2, 4, '', '', '', '', 7, 3],
            ['', '', '', '', '', '', '', 1, ''],
            ['', 1, 8, 6, 3, '', 2, 9, 4],
        ]

        expect(solve(board)).toEqual([
            [8, 5, 6, 2, 1, 4, 7, 3, 9],
            [1, 9, 3, 5, 7, 6, 8, 4, 2],
            [2, 4, 7, 9, 8, 3, 1, 6, 5],
            [4, 6, 2, 7, 5, 9, 3, 8, 1],
            [9, 3, 1, 8, 6, 2, 4, 5, 7],
            [7, 8, 5, 3, 4, 1, 9, 2, 6],
            [6, 2, 4, 1, 9, 8, 5, 7, 3],
            [3, 7, 9, 4, 2, 5, 6, 1, 8],
            [5, 1, 8, 6, 3, 7, 2, 9, 4],
        ])
    })

    it('handles invalid puzzles', () => {
        const board = [
            [8, 5, 6, '', 1, 4, 7, 3, ''],
            ['', 9, '', '', '', '', '', '', ''],
            [2, 4, '', '', '', '', 1, 6, ''],
            ['', 6, 2, '', 5, 9, 3, '', ''],
            ['', 3, 1, 8, '', 2, 4, 5, ''],
            ['', '', 5, 3, 4, '', 9, 2, ''],
            ['', 2, 4, '', '', '', '', 7, 3],
            ['', '', '', '', 9, '', '', 1, ''],
            ['', 1, 8, 6, 3, '', 2, 9, 4],
        ]

        expect(solve(board)).toEqual([
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', '', '', '', ''],
        ])
    })

    it('solves puzzle that are hard for backtracking', () => {
        const board = [
            ['', '', '', '', '', '', '', '', ''],
            ['', '', '', '', '', 3, '', 8, 5],
            ['', '', 1, '', 2, '', '', '', ''],
            ['', '', '', 5, '', 7, '', '', ''],
            ['', '', 4, '', '', '', 1, '', ''],
            ['', 9, '', '', '', '', '', '', ''],
            [5, '', '', '', '', '', '', 7, 3],
            ['', '', 2, '', 1, '', '', '', ''],
            ['', '', '', '', 4, '', '', '', 9]
        ]

        expect(solve(board)).toEqual([
            [9, 8, 7, 6, 5, 4, 3, 2, 1],
            [2, 4, 6, 1, 7, 3, 9, 8, 5],
            [3, 5, 1, 9, 2, 8, 7, 4, 6],
            [1, 2, 8, 5, 3, 7, 6, 9, 4],
            [6, 3, 4, 8, 9, 2, 1, 5, 7],
            [7, 9, 5, 4, 6, 1, 8, 3, 2],
            [5, 1, 9, 2, 8, 6, 4, 7, 3],
            [4, 7, 2, 3, 1, 9, 5, 6, 8],
            [8, 6, 3, 7, 4, 5, 2, 1, 9],
        ])
    })
})